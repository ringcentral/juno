// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Storyshots ðŸš€ Cleanup Components/Forms/TimePicker Time Picker Change Range 1`] = `
Array [
  .c7 {
  width: 1em;
  height: 1em;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
  pointer-events: none;
}

.c6 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  font-size: 24px;
}

.c5 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 20px;
  height: 20px;
  color: #666666;
  border-radius: 50%;
  -webkit-transition: background 150ms cubic-bezier(0.4,0,0.2,1) 0ms;
  transition: background 150ms cubic-bezier(0.4,0,0.2,1) 0ms;
  cursor: pointer;
  font-size: 20px;
}

.c5:active {
  color: #666666;
}

.c5.focus-visible,
.c5[data-focus-visible-added] {
  background-color: transparent;
}

.c5.focus-visible:active,
.c5[data-focus-visible-added]:active {
  color: rgba(102,102,102,0.88);
}

.c5.focus-visible:after,
.c5[data-focus-visible-added]:after {
  content: '';
  position: absolute;
  top: -4px;
  right: -4px;
  bottom: -4px;
  left: -4px;
  box-shadow: 0 0 0 1px #066FAC;
  border-radius: 50%;
  pointer-events: none;
  z-index: 1;
}

.c5.RcIconButton-persistBg {
  background-color: rgba(102,102,102,0.12);
}

.c5.RcIconButton-disabled {
  color: #B9B9B9;
}

.c5.RcIconButton-invisible {
  opacity: 0;
  visibility: hidden;
  width: 0;
  height: 0;
}

.c5.RcIconButton-outline {
  border: 1px solid #C7C7C7;
}

.c5.RcIconButton-contained {
  color: #fff;
  background-color: #666666;
}

.c5.RcIconButton-contained:before {
  content: '';
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  position: absolute;
}

.c5.RcIconButton-contained.focus-visible,
.c5.RcIconButton-contained[data-focus-visible-added] {
  color: #fff;
}

.c5.RcIconButton-contained.focus-visible:before,
.c5.RcIconButton-contained[data-focus-visible-added]:before {
  background-color: rgba(255,255,255,0.16);
}

.c5.RcIconButton-contained:active {
  color: #fff;
}

.c5 .RcIconButtonTouchRipple-ripplePulsate {
  border-radius: 0;
  -webkit-animation-name: none;
  animation-name: none;
  opacity: 0;
}

.c8 {
  -webkit-clip-path: inset(100%);
  clip-path: inset(100%);
  -webkit-clip: rect(1px,1px,1px,1px);
  clip: rect(1px,1px,1px,1px);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.c2 {
  width: 168px;
}

.c2 .c4 {
  margin-left: 12px;
}

.c2.RcTextField-root {
  margin: 0 0 16px 0;
}

.c2 .RcTextFieldInputLabel-root {
  font-size: 0.75rem;
  font-weight: 700;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 16px;
  color: #666666;
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
}

.c2 .RcTextFieldInputLabel-focused {
  color: #066FAC;
}

.c2 .RcTextFieldInput-root {
  color: #121212;
}

.c2 .RcTextFieldInput-input {
  font-size: 1rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 24px;
}

.c2 .RcTextFieldInput-input::-webkit-input-placeholder {
  color: #757575;
  opacity: 1;
}

.c2 .RcTextFieldInput-input::-moz-placeholder {
  color: #757575;
  opacity: 1;
}

.c2 .RcTextFieldInput-input:-ms-input-placeholder {
  color: #757575;
  opacity: 1;
}

.c2 .RcTextFieldInput-input::placeholder {
  color: #757575;
  opacity: 1;
}

.c2 .RcTextFieldInput-underline:before {
  border-bottom-color: #939393;
}

.c2 .RcTextFieldInput-underline:after {
  border-bottom-color: #066FAC;
}

.c2 .RcTextFieldInput-error:after {
  border-bottom-color: #BE3933;
}

.c2 .RcTextFieldInput-disabled {
  color: #B9B9B9;
  -webkit-text-fill-color: #B9B9B9;
}

.c2 .RcTextFieldInput-disabled::-webkit-input-placeholder {
  color: #B9B9B9;
}

.c2 .RcTextFieldInput-disabled::-moz-placeholder {
  color: #B9B9B9;
}

.c2 .RcTextFieldInput-disabled:-ms-input-placeholder {
  color: #B9B9B9;
}

.c2 .RcTextFieldInput-disabled::placeholder {
  color: #B9B9B9;
}

.c2 .RcTextFieldInput-disabled:before {
  border-bottom-style: solid;
  border-bottom-color: #B9B9B9;
}

.c2 .RcTextFieldInput-disabled:after {
  border-bottom-style: none;
}

.c2 .RcTextFieldFormHelperText-root {
  font-size: 0.75rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 16px;
  color: #666666;
}

.c2 .RcTextFieldFormHelperText-error,
.c2 .RcTextFieldInputLabel-error {
  color: #BE3933;
}

.c2 .RcTextFieldFormHelperText-disabled,
.c2 .RcTextFieldInputLabel-disabled {
  color: #B9B9B9;
}

.c2 input[type='search']::-ms-clear,
.c2 input[type='search']::-ms-reveal {
  display: none;
  width: 0;
  height: 0;
}

.c2 input[type='search']::-webkit-search-decoration,
.c2 input[type='search']::-webkit-search-cancel-button,
.c2 input[type='search']::-webkit-search-results-button,
.c2 input[type='search']::-webkit-search-results-decoration {
  display: none;
}

.c1 {
  font-size: 1.5rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 32px;
  color: #121212;
}

.c3 .picker-clear {
  display: none;
}

.c3 .RcTextFieldInput-root,
.c3 .RcTextFieldInput-input {
  cursor: pointer;
}

.c3 .RcTextFieldInput-disabled {
  cursor: auto;
}

.c3 .picker-action {
  margin: 0;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c0 > * + * {
  margin-left: 8px;
}

@media (hover:hover) and (pointer:fine) {
  .c5:hover {
    background-color: transparent;
    color: rgba(102,102,102,0.88);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c5.RcIconButton-contained:hover {
    color: #fff;
  }

  .c5.RcIconButton-contained:hover:before {
    background-color: rgba(255,255,255,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {
  .c2 .RcTextFieldInput-underline:hover:not(.RcTextFieldInput-disabled):before {
    border-bottom-color: #121212;
  }
}

@media (hover:hover) and (pointer:fine) {
  .c3 .RcTextFieldInput-root:hover .picker-action {
    display: none;
  }

  .c3 .RcTextFieldInput-root:hover .picker-clear {
    display: -webkit-inline-box;
    display: -webkit-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
  }
}

<div
    className="c0"
  >
    <div>
      <h5
        className="MuiTypography-root c1 MuiTypography-paragraph MuiTypography-displayBlock"
        data-color="neutral.f06"
        data-variant="headline1"
      >
        Min and Max
      </h5>
      <div
        className="MuiFormControl-root MuiTextField-root RcTextField-root c2 c3 "
      >
        <div
          className="MuiInputBase-root MuiInput-root RcTextFieldInput-root MuiInput-underline RcTextFieldInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
          onClick={[Function]}
        >
          <input
            aria-describedby="PickerTextField-0-helper-text PickerTextField-0-instruction"
            aria-haspopup={true}
            aria-invalid={false}
            autoFocus={false}
            className="MuiInputBase-input MuiInput-input RcTextFieldInput-input MuiInputBase-inputAdornedEnd"
            disabled={false}
            id="PickerTextField-0"
            onAnimationStart={[Function]}
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            placeholder="what's time?"
            readOnly={true}
            required={false}
            type="text"
            value="10:45"
          />
          <button
            className="MuiButtonBase-root c4 c5 picker-clear RcIconButton-root"
            disabled={false}
            onBlur={[Function]}
            onClick={[Function]}
            onDragLeave={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            tabIndex={-1}
            type="button"
          >
            <span
              className="c6 delete_circle icon"
            >
              <svg
                className="c7"
                viewBox="0 0 32 32"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M16 2c7.732 0 14 6.268 14 14s-6.268 14-14 14S2 23.732 2 16 8.268 2 16 2zm-4.243 8.343a.999.999 0 0 0-1.497 1.32l.083.094 4.243 4.241-4.243 4.244a.999.999 0 0 0 1.32 1.497l.094-.083L16 17.412l4.243 4.244a.999.999 0 0 0 1.497-1.32l-.083-.094-4.243-4.244 4.243-4.241a.999.999 0 0 0-1.32-1.497l-.094.083L16 14.584l-4.243-4.241z"
                />
              </svg>
              
            </span>
          </button>
          <button
            className="MuiButtonBase-root c4 c5 picker-action RcIconButton-root"
            disabled={false}
            onBlur={[Function]}
            onDragLeave={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            tabIndex={-1}
            type="button"
          >
            <span
              className="c6 time_border icon"
            >
              <svg
                className="c7"
                viewBox="0 0 32 32"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M16 2c7.732 0 14 6.268 14 14s-6.268 14-14 14S2 23.732 2 16 8.268 2 16 2zm0 2C9.373 4 4 9.373 4 16s5.373 12 12 12 12-5.373 12-12S22.627 4 16 4zM9 17a1 1 0 0 1 0-2h6V7a1 1 0 0 1 2 0v9a1 1 0 0 1-.883.993L16 17H9z"
                />
              </svg>
              
            </span>
          </button>
        </div>
      </div>
      <span
        className="c8"
        id="PickerTextField-0-instruction"
      >
        press enter or space to change the time
      </span>
    </div>
    <div>
      <h5
        className="MuiTypography-root c1 MuiTypography-paragraph MuiTypography-displayBlock"
        data-color="neutral.f06"
        data-variant="headline1"
      >
        Only min
      </h5>
      <div
        className="MuiFormControl-root MuiTextField-root RcTextField-root c2 c3 "
      >
        <div
          className="MuiInputBase-root MuiInput-root RcTextFieldInput-root MuiInput-underline RcTextFieldInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
          onClick={[Function]}
        >
          <input
            aria-describedby="PickerTextField-0-helper-text PickerTextField-0-instruction"
            aria-haspopup={true}
            aria-invalid={false}
            autoFocus={false}
            className="MuiInputBase-input MuiInput-input RcTextFieldInput-input MuiInputBase-inputAdornedEnd"
            disabled={false}
            id="PickerTextField-0"
            onAnimationStart={[Function]}
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            placeholder="what's time?"
            readOnly={true}
            required={false}
            type="text"
            value="10:45"
          />
          <button
            className="MuiButtonBase-root c4 c5 picker-clear RcIconButton-root"
            disabled={false}
            onBlur={[Function]}
            onClick={[Function]}
            onDragLeave={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            tabIndex={-1}
            type="button"
          >
            <span
              className="c6 delete_circle icon"
            >
              <svg
                className="c7"
                viewBox="0 0 32 32"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M16 2c7.732 0 14 6.268 14 14s-6.268 14-14 14S2 23.732 2 16 8.268 2 16 2zm-4.243 8.343a.999.999 0 0 0-1.497 1.32l.083.094 4.243 4.241-4.243 4.244a.999.999 0 0 0 1.32 1.497l.094-.083L16 17.412l4.243 4.244a.999.999 0 0 0 1.497-1.32l-.083-.094-4.243-4.244 4.243-4.241a.999.999 0 0 0-1.32-1.497l-.094.083L16 14.584l-4.243-4.241z"
                />
              </svg>
              
            </span>
          </button>
          <button
            className="MuiButtonBase-root c4 c5 picker-action RcIconButton-root"
            disabled={false}
            onBlur={[Function]}
            onDragLeave={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            tabIndex={-1}
            type="button"
          >
            <span
              className="c6 time_border icon"
            >
              <svg
                className="c7"
                viewBox="0 0 32 32"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M16 2c7.732 0 14 6.268 14 14s-6.268 14-14 14S2 23.732 2 16 8.268 2 16 2zm0 2C9.373 4 4 9.373 4 16s5.373 12 12 12 12-5.373 12-12S22.627 4 16 4zM9 17a1 1 0 0 1 0-2h6V7a1 1 0 0 1 2 0v9a1 1 0 0 1-.883.993L16 17H9z"
                />
              </svg>
              
            </span>
          </button>
        </div>
      </div>
      <span
        className="c8"
        id="PickerTextField-0-instruction"
      >
        press enter or space to change the time
      </span>
    </div>
  </div>,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  .c0 {
  text-transform: none;
  font-size: 0.9375rem;
  font-weight: 700;
  font-family: Lato,Helvetica,Arial,sans-serif;
  text-align: center;
  box-shadow: unset;
  min-width: 96px;
  min-height: 36px;
  padding: 0px 16px;
}

.c0 .RcButton-startIcon {
  margin-right: 8px;
}

.c0 .RcButton-endIcon {
  margin-left: 8px;
}

.c0.RcButton-text {
  color: #FF8800;
}

.c0.RcButton-text.RcButton-disabled {
  color: #B9B9B9;
}

.c0.RcButton-contained {
  color: rgba(0,0,0,0.87);
  background-color: #FF8800;
}

.c0.RcButton-contained.RcButton-disabled {
  background-color: #B9B9B9;
  color: #FFFFFF;
}

.c0.RcButton-outlined {
  color: #FF8800;
  border-color: #FF8800;
  padding: 0px 15px;
}

.c0.RcButton-outlined.RcButton-disabled {
  color: #B9B9B9;
  border-color: #B9B9B9;
}

.c0.RcButton-outlined:after {
  top: -1px;
  bottom: -1px;
  left: -1px;
  right: -1px;
  border: 1px solid transparent;
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-text:hover {
    background-color: rgba(255,136,0,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-contained:hover {
    background-color: rgba(255,136,0,0.92);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-outlined:hover {
    background-color: rgba(255,136,0,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<button
    className="MuiButtonBase-root MuiButton-root MuiButton-contained RcButton-contained c0"
    disabled={false}
    onBlur={[Function]}
    onClick={[Function]}
    onDragLeave={[Function]}
    onFocus={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseDown={[Function]}
    onMouseLeave={[Function]}
    onMouseUp={[Function]}
    onTouchEnd={[Function]}
    onTouchMove={[Function]}
    onTouchStart={[Function]}
    tabIndex={0}
    type="button"
  >
    <span
      className="MuiButton-label"
    >
      switch to twelve hour system
    </span>
    <span
      className="MuiTouchRipple-root"
    />
  </button>,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  .c1 {
  text-transform: none;
  font-size: 0.9375rem;
  font-weight: 700;
  font-family: Lato,Helvetica,Arial,sans-serif;
  text-align: center;
  box-shadow: unset;
  min-width: 96px;
  min-height: 36px;
  padding: 0px 16px;
}

.c1 .RcButton-startIcon {
  margin-right: 8px;
}

.c1 .RcButton-endIcon {
  margin-left: 8px;
}

.c1.RcButton-text {
  color: #066FAC;
}

.c1.RcButton-text.RcButton-disabled {
  color: #B9B9B9;
}

.c1.RcButton-contained {
  color: #fff;
  background-color: #066FAC;
}

.c1.RcButton-contained.RcButton-disabled {
  background-color: #B9B9B9;
  color: #FFFFFF;
}

.c1.RcButton-outlined {
  color: #066FAC;
  border-color: #066FAC;
  padding: 0px 15px;
}

.c1.RcButton-outlined.RcButton-disabled {
  color: #B9B9B9;
  border-color: #B9B9B9;
}

.c1.RcButton-outlined:after {
  top: -1px;
  bottom: -1px;
  left: -1px;
  right: -1px;
  border: 1px solid transparent;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c0 > * + * {
  margin-left: 8px;
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {
  .c1.RcButton-text:hover {
    background-color: rgba(6,111,172,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c1.RcButton-contained:hover {
    background-color: rgba(6,111,172,0.92);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c1.RcButton-outlined:hover {
    background-color: rgba(6,111,172,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<div
    className="c0"
  >
    <button
      className="MuiButtonBase-root MuiButton-root MuiButton-contained RcButton-contained c1"
      disabled={false}
      onBlur={[Function]}
      onClick={[Function]}
      onDragLeave={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyUp={[Function]}
      onMouseDown={[Function]}
      onMouseLeave={[Function]}
      onMouseUp={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      tabIndex={0}
      type="button"
    >
      <span
        className="MuiButton-label"
      >
        reset min to 5:15
      </span>
      <span
        className="MuiTouchRipple-root"
      />
    </button>
    <button
      className="MuiButtonBase-root MuiButton-root MuiButton-contained RcButton-contained c1"
      disabled={false}
      onBlur={[Function]}
      onClick={[Function]}
      onDragLeave={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyUp={[Function]}
      onMouseDown={[Function]}
      onMouseLeave={[Function]}
      onMouseUp={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      tabIndex={0}
      type="button"
    >
      <span
        className="MuiButton-label"
      >
        reset min to 16:0
      </span>
      <span
        className="MuiTouchRipple-root"
      />
    </button>
    <button
      className="MuiButtonBase-root MuiButton-root MuiButton-contained RcButton-contained c1"
      disabled={false}
      onBlur={[Function]}
      onClick={[Function]}
      onDragLeave={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyUp={[Function]}
      onMouseDown={[Function]}
      onMouseLeave={[Function]}
      onMouseUp={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      tabIndex={0}
      type="button"
    >
      <span
        className="MuiButton-label"
      >
        reset min to 16:15
      </span>
      <span
        className="MuiTouchRipple-root"
      />
    </button>
  </div>,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  .c1 {
  text-transform: none;
  font-size: 0.9375rem;
  font-weight: 700;
  font-family: Lato,Helvetica,Arial,sans-serif;
  text-align: center;
  box-shadow: unset;
  min-width: 96px;
  min-height: 36px;
  padding: 0px 16px;
}

.c1 .RcButton-startIcon {
  margin-right: 8px;
}

.c1 .RcButton-endIcon {
  margin-left: 8px;
}

.c1.RcButton-text {
  color: #066FAC;
}

.c1.RcButton-text.RcButton-disabled {
  color: #B9B9B9;
}

.c1.RcButton-contained {
  color: #fff;
  background-color: #066FAC;
}

.c1.RcButton-contained.RcButton-disabled {
  background-color: #B9B9B9;
  color: #FFFFFF;
}

.c1.RcButton-outlined {
  color: #066FAC;
  border-color: #066FAC;
  padding: 0px 15px;
}

.c1.RcButton-outlined.RcButton-disabled {
  color: #B9B9B9;
  border-color: #B9B9B9;
}

.c1.RcButton-outlined:after {
  top: -1px;
  bottom: -1px;
  left: -1px;
  right: -1px;
  border: 1px solid transparent;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c0 > * + * {
  margin-left: 8px;
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {
  .c1.RcButton-text:hover {
    background-color: rgba(6,111,172,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c1.RcButton-contained:hover {
    background-color: rgba(6,111,172,0.92);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c1.RcButton-outlined:hover {
    background-color: rgba(6,111,172,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<div
    className="c0"
  >
    <button
      className="MuiButtonBase-root MuiButton-root MuiButton-contained RcButton-contained c1"
      disabled={false}
      onBlur={[Function]}
      onClick={[Function]}
      onDragLeave={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyUp={[Function]}
      onMouseDown={[Function]}
      onMouseLeave={[Function]}
      onMouseUp={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      tabIndex={0}
      type="button"
    >
      <span
        className="MuiButton-label"
      >
        reset max to 11:15
      </span>
      <span
        className="MuiTouchRipple-root"
      />
    </button>
    <button
      className="MuiButtonBase-root MuiButton-root MuiButton-contained RcButton-contained c1"
      disabled={false}
      onBlur={[Function]}
      onClick={[Function]}
      onDragLeave={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyUp={[Function]}
      onMouseDown={[Function]}
      onMouseLeave={[Function]}
      onMouseUp={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      tabIndex={0}
      type="button"
    >
      <span
        className="MuiButton-label"
      >
        reset max to 16:0
      </span>
      <span
        className="MuiTouchRipple-root"
      />
    </button>
    <button
      className="MuiButtonBase-root MuiButton-root MuiButton-contained RcButton-contained c1"
      disabled={false}
      onBlur={[Function]}
      onClick={[Function]}
      onDragLeave={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyUp={[Function]}
      onMouseDown={[Function]}
      onMouseLeave={[Function]}
      onMouseUp={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      tabIndex={0}
      type="button"
    >
      <span
        className="MuiButton-label"
      >
        reset max to 19:0
      </span>
      <span
        className="MuiTouchRipple-root"
      />
    </button>
    <button
      className="MuiButtonBase-root MuiButton-root MuiButton-contained RcButton-contained c1"
      disabled={false}
      onBlur={[Function]}
      onClick={[Function]}
      onDragLeave={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyUp={[Function]}
      onMouseDown={[Function]}
      onMouseLeave={[Function]}
      onMouseUp={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      tabIndex={0}
      type="button"
    >
      <span
        className="MuiButton-label"
      >
        reset max to 19:15
      </span>
      <span
        className="MuiTouchRipple-root"
      />
    </button>
  </div>,
]
`;

exports[`Storyshots ðŸš€ Cleanup Components/Forms/TimePicker TimePicker 1`] = `
Array [
  .c5 {
  width: 1em;
  height: 1em;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
  pointer-events: none;
}

.c4 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  font-size: 24px;
}

.c3 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 20px;
  height: 20px;
  color: #666666;
  border-radius: 50%;
  -webkit-transition: background 150ms cubic-bezier(0.4,0,0.2,1) 0ms;
  transition: background 150ms cubic-bezier(0.4,0,0.2,1) 0ms;
  cursor: pointer;
  font-size: 20px;
}

.c3:active {
  color: #666666;
}

.c3.focus-visible,
.c3[data-focus-visible-added] {
  background-color: transparent;
}

.c3.focus-visible:active,
.c3[data-focus-visible-added]:active {
  color: rgba(102,102,102,0.88);
}

.c3.focus-visible:after,
.c3[data-focus-visible-added]:after {
  content: '';
  position: absolute;
  top: -4px;
  right: -4px;
  bottom: -4px;
  left: -4px;
  box-shadow: 0 0 0 1px #066FAC;
  border-radius: 50%;
  pointer-events: none;
  z-index: 1;
}

.c3.RcIconButton-persistBg {
  background-color: rgba(102,102,102,0.12);
}

.c3.RcIconButton-disabled {
  color: #B9B9B9;
}

.c3.RcIconButton-invisible {
  opacity: 0;
  visibility: hidden;
  width: 0;
  height: 0;
}

.c3.RcIconButton-outline {
  border: 1px solid #C7C7C7;
}

.c3.RcIconButton-contained {
  color: #fff;
  background-color: #666666;
}

.c3.RcIconButton-contained:before {
  content: '';
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  position: absolute;
}

.c3.RcIconButton-contained.focus-visible,
.c3.RcIconButton-contained[data-focus-visible-added] {
  color: #fff;
}

.c3.RcIconButton-contained.focus-visible:before,
.c3.RcIconButton-contained[data-focus-visible-added]:before {
  background-color: rgba(255,255,255,0.16);
}

.c3.RcIconButton-contained:active {
  color: #fff;
}

.c3 .RcIconButtonTouchRipple-ripplePulsate {
  border-radius: 0;
  -webkit-animation-name: none;
  animation-name: none;
  opacity: 0;
}

.c0 {
  width: 168px;
}

.c0 .c2 {
  margin-left: 12px;
}

.c0 .RcTextFieldInputLabel-root {
  font-size: 0.75rem;
  font-weight: 700;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 16px;
  color: #666666;
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
}

.c0 .RcTextFieldInputLabel-focused {
  color: #066FAC;
}

.c0 .RcTextFieldInput-root {
  color: #121212;
}

.c0 .RcTextFieldInput-input {
  font-size: 1rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 24px;
}

.c0 .RcTextFieldInput-input::-webkit-input-placeholder {
  color: #757575;
  opacity: 1;
}

.c0 .RcTextFieldInput-input::-moz-placeholder {
  color: #757575;
  opacity: 1;
}

.c0 .RcTextFieldInput-input:-ms-input-placeholder {
  color: #757575;
  opacity: 1;
}

.c0 .RcTextFieldInput-input::placeholder {
  color: #757575;
  opacity: 1;
}

.c0 .RcTextFieldInput-underline:before {
  border-bottom-color: #939393;
}

.c0 .RcTextFieldInput-underline:after {
  border-bottom-color: #066FAC;
}

.c0 .RcTextFieldInput-error:after {
  border-bottom-color: #BE3933;
}

.c0 .RcTextFieldInput-disabled {
  color: #B9B9B9;
  -webkit-text-fill-color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled::-webkit-input-placeholder {
  color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled::-moz-placeholder {
  color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled:-ms-input-placeholder {
  color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled::placeholder {
  color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled:before {
  border-bottom-style: solid;
  border-bottom-color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled:after {
  border-bottom-style: none;
}

.c0 .RcTextFieldFormHelperText-root {
  font-size: 0.75rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 16px;
  color: #666666;
}

.c0 .RcTextFieldFormHelperText-error,
.c0 .RcTextFieldInputLabel-error {
  color: #BE3933;
}

.c0 .RcTextFieldFormHelperText-disabled,
.c0 .RcTextFieldInputLabel-disabled {
  color: #B9B9B9;
}

.c0 input[type='search']::-ms-clear,
.c0 input[type='search']::-ms-reveal {
  display: none;
  width: 0;
  height: 0;
}

.c0 input[type='search']::-webkit-search-decoration,
.c0 input[type='search']::-webkit-search-cancel-button,
.c0 input[type='search']::-webkit-search-results-button,
.c0 input[type='search']::-webkit-search-results-decoration {
  display: none;
}

.c1 .picker-clear {
  display: none;
}

.c1 .RcTextFieldInput-root,
.c1 .RcTextFieldInput-input {
  cursor: pointer;
}

.c1 .RcTextFieldInput-disabled {
  cursor: auto;
}

.c1 .picker-action {
  margin: 0;
}

@media (hover:hover) and (pointer:fine) {
  .c3:hover {
    background-color: transparent;
    color: rgba(102,102,102,0.88);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c3.RcIconButton-contained:hover {
    color: #fff;
  }

  .c3.RcIconButton-contained:hover:before {
    background-color: rgba(255,255,255,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {
  .c0 .RcTextFieldInput-underline:hover:not(.RcTextFieldInput-disabled):before {
    border-bottom-color: #121212;
  }
}

@media (hover:hover) and (pointer:fine) {
  .c1 .RcTextFieldInput-root:hover .picker-action {
    display: none;
  }

  .c1 .RcTextFieldInput-root:hover .picker-clear {
    display: -webkit-inline-box;
    display: -webkit-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
  }
}

<div
    className="MuiFormControl-root MuiTextField-root RcTextField-root c0 c1 "
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root RcTextFieldInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
      data-shrink={true}
      htmlFor="PickerTextField-0"
      id="PickerTextField-0-label"
    >
      Time
    </label>
    <div
      className="MuiInputBase-root MuiInput-root RcTextFieldInput-root MuiInput-underline RcTextFieldInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
      onClick={[Function]}
    >
      <input
        aria-describedby="PickerTextField-0-helper-text PickerTextField-0-instruction"
        aria-haspopup={true}
        aria-invalid={false}
        autoFocus={false}
        className="MuiInputBase-input MuiInput-input RcTextFieldInput-input MuiInputBase-inputAdornedEnd"
        disabled={false}
        id="PickerTextField-0"
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        placeholder="what's time?"
        readOnly={true}
        required={false}
        type="text"
        value="16:15"
      />
      <button
        className="MuiButtonBase-root c2 c3 picker-clear RcIconButton-root"
        disabled={false}
        onBlur={[Function]}
        onClick={[Function]}
        onDragLeave={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onKeyUp={[Function]}
        onMouseDown={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
        tabIndex={-1}
        type="button"
      >
        <span
          className="c4 delete_circle icon"
        >
          <svg
            className="c5"
            viewBox="0 0 32 32"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M16 2c7.732 0 14 6.268 14 14s-6.268 14-14 14S2 23.732 2 16 8.268 2 16 2zm-4.243 8.343a.999.999 0 0 0-1.497 1.32l.083.094 4.243 4.241-4.243 4.244a.999.999 0 0 0 1.32 1.497l.094-.083L16 17.412l4.243 4.244a.999.999 0 0 0 1.497-1.32l-.083-.094-4.243-4.244 4.243-4.241a.999.999 0 0 0-1.32-1.497l-.094.083L16 14.584l-4.243-4.241z"
            />
          </svg>
          
        </span>
      </button>
      <button
        className="MuiButtonBase-root c2 c3 picker-action RcIconButton-root"
        disabled={false}
        onBlur={[Function]}
        onDragLeave={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onKeyUp={[Function]}
        onMouseDown={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
        tabIndex={-1}
        type="button"
      >
        <span
          className="c4 time_border icon"
        >
          <svg
            className="c5"
            viewBox="0 0 32 32"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M16 2c7.732 0 14 6.268 14 14s-6.268 14-14 14S2 23.732 2 16 8.268 2 16 2zm0 2C9.373 4 4 9.373 4 16s5.373 12 12 12 12-5.373 12-12S22.627 4 16 4zM9 17a1 1 0 0 1 0-2h6V7a1 1 0 0 1 2 0v9a1 1 0 0 1-.883.993L16 17H9z"
            />
          </svg>
          
        </span>
      </button>
    </div>
  </div>,
  .c0 {
  -webkit-clip-path: inset(100%);
  clip-path: inset(100%);
  -webkit-clip: rect(1px,1px,1px,1px);
  clip: rect(1px,1px,1px,1px);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<span
    className="c0"
    id="PickerTextField-0-instruction"
  />,
]
`;

exports[`Storyshots ðŸš€ Cleanup Components/Forms/TimePicker TimePicker Examples 1`] = `
Array [
  .c0 {
  font-size: 0.9375rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 22px;
  color: #066FAC;
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<p
    className="MuiTypography-root c0"
    data-color="interactive.f01"
    data-variant="body1"
  >
    Timestamp Mode
  </p>,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  .c5 {
  width: 1em;
  height: 1em;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
  pointer-events: none;
}

.c4 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  font-size: 24px;
}

.c3 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 20px;
  height: 20px;
  color: #666666;
  border-radius: 50%;
  -webkit-transition: background 150ms cubic-bezier(0.4,0,0.2,1) 0ms;
  transition: background 150ms cubic-bezier(0.4,0,0.2,1) 0ms;
  cursor: pointer;
  font-size: 20px;
}

.c3:active {
  color: #666666;
}

.c3.focus-visible,
.c3[data-focus-visible-added] {
  background-color: transparent;
}

.c3.focus-visible:active,
.c3[data-focus-visible-added]:active {
  color: rgba(102,102,102,0.88);
}

.c3.focus-visible:after,
.c3[data-focus-visible-added]:after {
  content: '';
  position: absolute;
  top: -4px;
  right: -4px;
  bottom: -4px;
  left: -4px;
  box-shadow: 0 0 0 1px #066FAC;
  border-radius: 50%;
  pointer-events: none;
  z-index: 1;
}

.c3.RcIconButton-persistBg {
  background-color: rgba(102,102,102,0.12);
}

.c3.RcIconButton-disabled {
  color: #B9B9B9;
}

.c3.RcIconButton-invisible {
  opacity: 0;
  visibility: hidden;
  width: 0;
  height: 0;
}

.c3.RcIconButton-outline {
  border: 1px solid #C7C7C7;
}

.c3.RcIconButton-contained {
  color: #fff;
  background-color: #666666;
}

.c3.RcIconButton-contained:before {
  content: '';
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  position: absolute;
}

.c3.RcIconButton-contained.focus-visible,
.c3.RcIconButton-contained[data-focus-visible-added] {
  color: #fff;
}

.c3.RcIconButton-contained.focus-visible:before,
.c3.RcIconButton-contained[data-focus-visible-added]:before {
  background-color: rgba(255,255,255,0.16);
}

.c3.RcIconButton-contained:active {
  color: #fff;
}

.c3 .RcIconButtonTouchRipple-ripplePulsate {
  border-radius: 0;
  -webkit-animation-name: none;
  animation-name: none;
  opacity: 0;
}

.c0 {
  width: 168px;
}

.c0 .c2 {
  margin-left: 12px;
}

.c0.RcTextField-root {
  margin: 0 0 16px 0;
}

.c0 .RcTextFieldInputLabel-root {
  font-size: 0.75rem;
  font-weight: 700;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 16px;
  color: #666666;
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
}

.c0 .RcTextFieldInputLabel-focused {
  color: #066FAC;
}

.c0 .RcTextFieldInput-root {
  color: #121212;
}

.c0 .RcTextFieldInput-input {
  font-size: 1rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 24px;
}

.c0 .RcTextFieldInput-input::-webkit-input-placeholder {
  color: #757575;
  opacity: 1;
}

.c0 .RcTextFieldInput-input::-moz-placeholder {
  color: #757575;
  opacity: 1;
}

.c0 .RcTextFieldInput-input:-ms-input-placeholder {
  color: #757575;
  opacity: 1;
}

.c0 .RcTextFieldInput-input::placeholder {
  color: #757575;
  opacity: 1;
}

.c0 .RcTextFieldInput-underline:before {
  border-bottom-color: #939393;
}

.c0 .RcTextFieldInput-underline:after {
  border-bottom-color: #066FAC;
}

.c0 .RcTextFieldInput-error:after {
  border-bottom-color: #BE3933;
}

.c0 .RcTextFieldInput-disabled {
  color: #B9B9B9;
  -webkit-text-fill-color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled::-webkit-input-placeholder {
  color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled::-moz-placeholder {
  color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled:-ms-input-placeholder {
  color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled::placeholder {
  color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled:before {
  border-bottom-style: solid;
  border-bottom-color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled:after {
  border-bottom-style: none;
}

.c0 .RcTextFieldFormHelperText-root {
  font-size: 0.75rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 16px;
  color: #666666;
}

.c0 .RcTextFieldFormHelperText-error,
.c0 .RcTextFieldInputLabel-error {
  color: #BE3933;
}

.c0 .RcTextFieldFormHelperText-disabled,
.c0 .RcTextFieldInputLabel-disabled {
  color: #B9B9B9;
}

.c0 input[type='search']::-ms-clear,
.c0 input[type='search']::-ms-reveal {
  display: none;
  width: 0;
  height: 0;
}

.c0 input[type='search']::-webkit-search-decoration,
.c0 input[type='search']::-webkit-search-cancel-button,
.c0 input[type='search']::-webkit-search-results-button,
.c0 input[type='search']::-webkit-search-results-decoration {
  display: none;
}

.c6 .c2 {
  margin-left: 12px;
}

.c7 .c2 {
  margin-left: 12px;
}

.c8 .c2 {
  margin-left: 12px;
}

.c1 .picker-clear {
  display: none;
}

.c1 .RcTextFieldInput-root,
.c1 .RcTextFieldInput-input {
  cursor: pointer;
}

.c1 .RcTextFieldInput-disabled {
  cursor: auto;
}

.c1 .picker-action {
  margin: 0;
}

@media (hover:hover) and (pointer:fine) {
  .c3:hover {
    background-color: transparent;
    color: rgba(102,102,102,0.88);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c3.RcIconButton-contained:hover {
    color: #fff;
  }

  .c3.RcIconButton-contained:hover:before {
    background-color: rgba(255,255,255,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {
  .c0 .RcTextFieldInput-underline:hover:not(.RcTextFieldInput-disabled):before {
    border-bottom-color: #121212;
  }
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {
  .c1 .RcTextFieldInput-root:hover .picker-action {
    display: none;
  }

  .c1 .RcTextFieldInput-root:hover .picker-clear {
    display: -webkit-inline-box;
    display: -webkit-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
  }
}

<div
    className="MuiFormControl-root MuiTextField-root RcTextField-root c0 c1 "
  >
    <div
      className="MuiInputBase-root MuiInput-root RcTextFieldInput-root MuiInput-underline RcTextFieldInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
      onClick={[Function]}
    >
      <input
        aria-describedby="PickerTextField-0-helper-text PickerTextField-0-instruction"
        aria-haspopup={true}
        aria-invalid={false}
        autoFocus={false}
        className="MuiInputBase-input MuiInput-input RcTextFieldInput-input MuiInputBase-inputAdornedEnd"
        disabled={false}
        id="PickerTextField-0"
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        placeholder="what's time?"
        readOnly={true}
        required={false}
        type="text"
        value="16:15"
      />
      <button
        className="MuiButtonBase-root c2 c3 picker-clear RcIconButton-root"
        disabled={false}
        onBlur={[Function]}
        onClick={[Function]}
        onDragLeave={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onKeyUp={[Function]}
        onMouseDown={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
        tabIndex={-1}
        type="button"
      >
        <span
          className="c4 delete_circle icon"
        >
          <svg
            className="c5"
            viewBox="0 0 32 32"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M16 2c7.732 0 14 6.268 14 14s-6.268 14-14 14S2 23.732 2 16 8.268 2 16 2zm-4.243 8.343a.999.999 0 0 0-1.497 1.32l.083.094 4.243 4.241-4.243 4.244a.999.999 0 0 0 1.32 1.497l.094-.083L16 17.412l4.243 4.244a.999.999 0 0 0 1.497-1.32l-.083-.094-4.243-4.244 4.243-4.241a.999.999 0 0 0-1.32-1.497l-.094.083L16 14.584l-4.243-4.241z"
            />
          </svg>
          
        </span>
      </button>
      <button
        className="MuiButtonBase-root c2 c3 picker-action RcIconButton-root"
        disabled={false}
        onBlur={[Function]}
        onDragLeave={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onKeyUp={[Function]}
        onMouseDown={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
        tabIndex={-1}
        type="button"
      >
        <span
          className="c4 time_border icon"
        >
          <svg
            className="c5"
            viewBox="0 0 32 32"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M16 2c7.732 0 14 6.268 14 14s-6.268 14-14 14S2 23.732 2 16 8.268 2 16 2zm0 2C9.373 4 4 9.373 4 16s5.373 12 12 12 12-5.373 12-12S22.627 4 16 4zM9 17a1 1 0 0 1 0-2h6V7a1 1 0 0 1 2 0v9a1 1 0 0 1-.883.993L16 17H9z"
            />
          </svg>
          
        </span>
      </button>
    </div>
  </div>,
  .c0 {
  -webkit-clip-path: inset(100%);
  clip-path: inset(100%);
  -webkit-clip: rect(1px,1px,1px,1px);
  clip: rect(1px,1px,1px,1px);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<span
    className="c0"
    id="PickerTextField-0-instruction"
  >
    press enter or space to change the time
  </span>,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  .c5 {
  width: 1em;
  height: 1em;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
  pointer-events: none;
}

.c4 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  font-size: 24px;
}

.c3 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 20px;
  height: 20px;
  color: #666666;
  border-radius: 50%;
  -webkit-transition: background 150ms cubic-bezier(0.4,0,0.2,1) 0ms;
  transition: background 150ms cubic-bezier(0.4,0,0.2,1) 0ms;
  cursor: pointer;
  font-size: 20px;
}

.c3:active {
  color: #666666;
}

.c3.focus-visible,
.c3[data-focus-visible-added] {
  background-color: transparent;
}

.c3.focus-visible:active,
.c3[data-focus-visible-added]:active {
  color: rgba(102,102,102,0.88);
}

.c3.focus-visible:after,
.c3[data-focus-visible-added]:after {
  content: '';
  position: absolute;
  top: -4px;
  right: -4px;
  bottom: -4px;
  left: -4px;
  box-shadow: 0 0 0 1px #066FAC;
  border-radius: 50%;
  pointer-events: none;
  z-index: 1;
}

.c3.RcIconButton-persistBg {
  background-color: rgba(102,102,102,0.12);
}

.c3.RcIconButton-disabled {
  color: #B9B9B9;
}

.c3.RcIconButton-invisible {
  opacity: 0;
  visibility: hidden;
  width: 0;
  height: 0;
}

.c3.RcIconButton-outline {
  border: 1px solid #C7C7C7;
}

.c3.RcIconButton-contained {
  color: #fff;
  background-color: #666666;
}

.c3.RcIconButton-contained:before {
  content: '';
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  position: absolute;
}

.c3.RcIconButton-contained.focus-visible,
.c3.RcIconButton-contained[data-focus-visible-added] {
  color: #fff;
}

.c3.RcIconButton-contained.focus-visible:before,
.c3.RcIconButton-contained[data-focus-visible-added]:before {
  background-color: rgba(255,255,255,0.16);
}

.c3.RcIconButton-contained:active {
  color: #fff;
}

.c3 .RcIconButtonTouchRipple-ripplePulsate {
  border-radius: 0;
  -webkit-animation-name: none;
  animation-name: none;
  opacity: 0;
}

.c0 {
  width: 168px;
}

.c0 .c2 {
  margin-left: 12px;
}

.c0.RcTextField-root {
  margin: 0 0 16px 0;
}

.c0 .RcTextFieldInputLabel-root {
  font-size: 0.75rem;
  font-weight: 700;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 16px;
  color: #666666;
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
}

.c0 .RcTextFieldInputLabel-focused {
  color: #066FAC;
}

.c0 .RcTextFieldInput-root {
  color: #121212;
}

.c0 .RcTextFieldInput-input {
  font-size: 1rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 24px;
}

.c0 .RcTextFieldInput-input::-webkit-input-placeholder {
  color: #757575;
  opacity: 1;
}

.c0 .RcTextFieldInput-input::-moz-placeholder {
  color: #757575;
  opacity: 1;
}

.c0 .RcTextFieldInput-input:-ms-input-placeholder {
  color: #757575;
  opacity: 1;
}

.c0 .RcTextFieldInput-input::placeholder {
  color: #757575;
  opacity: 1;
}

.c0 .RcTextFieldInput-underline:before {
  border-bottom-color: #939393;
}

.c0 .RcTextFieldInput-underline:after {
  border-bottom-color: #066FAC;
}

.c0 .RcTextFieldInput-error:after {
  border-bottom-color: #BE3933;
}

.c0 .RcTextFieldInput-disabled {
  color: #B9B9B9;
  -webkit-text-fill-color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled::-webkit-input-placeholder {
  color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled::-moz-placeholder {
  color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled:-ms-input-placeholder {
  color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled::placeholder {
  color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled:before {
  border-bottom-style: solid;
  border-bottom-color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled:after {
  border-bottom-style: none;
}

.c0 .RcTextFieldFormHelperText-root {
  font-size: 0.75rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 16px;
  color: #666666;
}

.c0 .RcTextFieldFormHelperText-error,
.c0 .RcTextFieldInputLabel-error {
  color: #BE3933;
}

.c0 .RcTextFieldFormHelperText-disabled,
.c0 .RcTextFieldInputLabel-disabled {
  color: #B9B9B9;
}

.c0 input[type='search']::-ms-clear,
.c0 input[type='search']::-ms-reveal {
  display: none;
  width: 0;
  height: 0;
}

.c0 input[type='search']::-webkit-search-decoration,
.c0 input[type='search']::-webkit-search-cancel-button,
.c0 input[type='search']::-webkit-search-results-button,
.c0 input[type='search']::-webkit-search-results-decoration {
  display: none;
}

.c6 .c2 {
  margin-left: 12px;
}

.c7 .c2 {
  margin-left: 12px;
}

.c8 .c2 {
  margin-left: 12px;
}

.c1 .picker-clear {
  display: none;
}

.c1 .RcTextFieldInput-root,
.c1 .RcTextFieldInput-input {
  cursor: pointer;
}

.c1 .RcTextFieldInput-disabled {
  cursor: auto;
}

.c1 .picker-action {
  margin: 0;
}

@media (hover:hover) and (pointer:fine) {
  .c3:hover {
    background-color: transparent;
    color: rgba(102,102,102,0.88);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c3.RcIconButton-contained:hover {
    color: #fff;
  }

  .c3.RcIconButton-contained:hover:before {
    background-color: rgba(255,255,255,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {
  .c0 .RcTextFieldInput-underline:hover:not(.RcTextFieldInput-disabled):before {
    border-bottom-color: #121212;
  }
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {
  .c1 .RcTextFieldInput-root:hover .picker-action {
    display: none;
  }

  .c1 .RcTextFieldInput-root:hover .picker-clear {
    display: -webkit-inline-box;
    display: -webkit-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
  }
}

<div
    className="MuiFormControl-root MuiTextField-root RcTextField-root c0 c1 "
  >
    <div
      className="MuiInputBase-root MuiInput-root RcTextFieldInput-root MuiInput-underline RcTextFieldInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
      onClick={[Function]}
    >
      <input
        aria-describedby="PickerTextField-0-helper-text PickerTextField-0-instruction"
        aria-haspopup={true}
        aria-invalid={false}
        autoFocus={false}
        className="MuiInputBase-input MuiInput-input RcTextFieldInput-input MuiInputBase-inputAdornedEnd"
        disabled={false}
        id="PickerTextField-0"
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        placeholder="what's time?"
        readOnly={true}
        required={false}
        type="text"
        value="04:15 PM"
      />
      <button
        className="MuiButtonBase-root c2 c3 picker-clear RcIconButton-root"
        disabled={false}
        onBlur={[Function]}
        onClick={[Function]}
        onDragLeave={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onKeyUp={[Function]}
        onMouseDown={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
        tabIndex={-1}
        type="button"
      >
        <span
          className="c4 delete_circle icon"
        >
          <svg
            className="c5"
            viewBox="0 0 32 32"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M16 2c7.732 0 14 6.268 14 14s-6.268 14-14 14S2 23.732 2 16 8.268 2 16 2zm-4.243 8.343a.999.999 0 0 0-1.497 1.32l.083.094 4.243 4.241-4.243 4.244a.999.999 0 0 0 1.32 1.497l.094-.083L16 17.412l4.243 4.244a.999.999 0 0 0 1.497-1.32l-.083-.094-4.243-4.244 4.243-4.241a.999.999 0 0 0-1.32-1.497l-.094.083L16 14.584l-4.243-4.241z"
            />
          </svg>
          
        </span>
      </button>
      <button
        className="MuiButtonBase-root c2 c3 picker-action RcIconButton-root"
        disabled={false}
        onBlur={[Function]}
        onDragLeave={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onKeyUp={[Function]}
        onMouseDown={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
        tabIndex={-1}
        type="button"
      >
        <span
          className="c4 time_border icon"
        >
          <svg
            className="c5"
            viewBox="0 0 32 32"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M16 2c7.732 0 14 6.268 14 14s-6.268 14-14 14S2 23.732 2 16 8.268 2 16 2zm0 2C9.373 4 4 9.373 4 16s5.373 12 12 12 12-5.373 12-12S22.627 4 16 4zM9 17a1 1 0 0 1 0-2h6V7a1 1 0 0 1 2 0v9a1 1 0 0 1-.883.993L16 17H9z"
            />
          </svg>
          
        </span>
      </button>
    </div>
  </div>,
  .c0 {
  -webkit-clip-path: inset(100%);
  clip-path: inset(100%);
  -webkit-clip: rect(1px,1px,1px,1px);
  clip: rect(1px,1px,1px,1px);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<span
    className="c0"
    id="PickerTextField-0-instruction"
  >
    press enter or space to change the time
  </span>,
  .c0 {
  font-size: 0.9375rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 22px;
  color: #066FAC;
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<p
    className="MuiTypography-root c0"
    data-color="interactive.f01"
    data-variant="body1"
  >
    Date Mode
  </p>,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  .c5 {
  width: 1em;
  height: 1em;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
  pointer-events: none;
}

.c4 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  font-size: 24px;
}

.c3 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 20px;
  height: 20px;
  color: #666666;
  border-radius: 50%;
  -webkit-transition: background 150ms cubic-bezier(0.4,0,0.2,1) 0ms;
  transition: background 150ms cubic-bezier(0.4,0,0.2,1) 0ms;
  cursor: pointer;
  font-size: 20px;
}

.c3:active {
  color: #666666;
}

.c3.focus-visible,
.c3[data-focus-visible-added] {
  background-color: transparent;
}

.c3.focus-visible:active,
.c3[data-focus-visible-added]:active {
  color: rgba(102,102,102,0.88);
}

.c3.focus-visible:after,
.c3[data-focus-visible-added]:after {
  content: '';
  position: absolute;
  top: -4px;
  right: -4px;
  bottom: -4px;
  left: -4px;
  box-shadow: 0 0 0 1px #066FAC;
  border-radius: 50%;
  pointer-events: none;
  z-index: 1;
}

.c3.RcIconButton-persistBg {
  background-color: rgba(102,102,102,0.12);
}

.c3.RcIconButton-disabled {
  color: #B9B9B9;
}

.c3.RcIconButton-invisible {
  opacity: 0;
  visibility: hidden;
  width: 0;
  height: 0;
}

.c3.RcIconButton-outline {
  border: 1px solid #C7C7C7;
}

.c3.RcIconButton-contained {
  color: #fff;
  background-color: #666666;
}

.c3.RcIconButton-contained:before {
  content: '';
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  position: absolute;
}

.c3.RcIconButton-contained.focus-visible,
.c3.RcIconButton-contained[data-focus-visible-added] {
  color: #fff;
}

.c3.RcIconButton-contained.focus-visible:before,
.c3.RcIconButton-contained[data-focus-visible-added]:before {
  background-color: rgba(255,255,255,0.16);
}

.c3.RcIconButton-contained:active {
  color: #fff;
}

.c3 .RcIconButtonTouchRipple-ripplePulsate {
  border-radius: 0;
  -webkit-animation-name: none;
  animation-name: none;
  opacity: 0;
}

.c6 .c2 {
  margin-left: 12px;
}

.c0 .c2 {
  margin-left: 12px;
}

.c0 .RcTextFieldInputLabel-root {
  font-size: 0.75rem;
  font-weight: 700;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 16px;
  color: #666666;
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
}

.c0 .RcTextFieldInputLabel-focused {
  color: #066FAC;
}

.c0 .RcTextFieldInput-root {
  color: #121212;
}

.c0 .RcTextFieldInput-input {
  font-size: 1rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 24px;
}

.c0 .RcTextFieldInput-input::-webkit-input-placeholder {
  color: #757575;
  opacity: 1;
}

.c0 .RcTextFieldInput-input::-moz-placeholder {
  color: #757575;
  opacity: 1;
}

.c0 .RcTextFieldInput-input:-ms-input-placeholder {
  color: #757575;
  opacity: 1;
}

.c0 .RcTextFieldInput-input::placeholder {
  color: #757575;
  opacity: 1;
}

.c0 .RcTextFieldInput-underline:before {
  border-bottom-color: #939393;
}

.c0 .RcTextFieldInput-underline:after {
  border-bottom-color: #066FAC;
}

.c0 .RcTextFieldInput-error:after {
  border-bottom-color: #BE3933;
}

.c0 .RcTextFieldInput-disabled {
  color: #B9B9B9;
  -webkit-text-fill-color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled::-webkit-input-placeholder {
  color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled::-moz-placeholder {
  color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled:-ms-input-placeholder {
  color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled::placeholder {
  color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled:before {
  border-bottom-style: solid;
  border-bottom-color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled:after {
  border-bottom-style: none;
}

.c0 .RcTextFieldFormHelperText-root {
  font-size: 0.75rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 16px;
  color: #666666;
}

.c0 .RcTextFieldFormHelperText-error,
.c0 .RcTextFieldInputLabel-error {
  color: #BE3933;
}

.c0 .RcTextFieldFormHelperText-disabled,
.c0 .RcTextFieldInputLabel-disabled {
  color: #B9B9B9;
}

.c0 input[type='search']::-ms-clear,
.c0 input[type='search']::-ms-reveal {
  display: none;
  width: 0;
  height: 0;
}

.c0 input[type='search']::-webkit-search-decoration,
.c0 input[type='search']::-webkit-search-cancel-button,
.c0 input[type='search']::-webkit-search-results-button,
.c0 input[type='search']::-webkit-search-results-decoration {
  display: none;
}

.c7 .c2 {
  margin-left: 12px;
}

.c8 .c2 {
  margin-left: 12px;
}

.c1 .picker-clear {
  display: none;
}

.c1 .RcTextFieldInput-root,
.c1 .RcTextFieldInput-input {
  cursor: pointer;
}

.c1 .RcTextFieldInput-disabled {
  cursor: auto;
}

.c1 .picker-action {
  margin: 0;
}

@media (hover:hover) and (pointer:fine) {
  .c3:hover {
    background-color: transparent;
    color: rgba(102,102,102,0.88);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c3.RcIconButton-contained:hover {
    color: #fff;
  }

  .c3.RcIconButton-contained:hover:before {
    background-color: rgba(255,255,255,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {
  .c0 .RcTextFieldInput-underline:hover:not(.RcTextFieldInput-disabled):before {
    border-bottom-color: #121212;
  }
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<div
    className="MuiFormControl-root MuiTextField-root RcTextField-root c0 c1 MuiFormControl-fullWidth"
  >
    <div
      className="MuiInputBase-root MuiInput-root RcTextFieldInput-root MuiInput-underline RcTextFieldInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
      onClick={[Function]}
    >
      <input
        aria-describedby="PickerTextField-0-helper-text PickerTextField-0-instruction"
        aria-haspopup={true}
        aria-invalid={false}
        autoFocus={false}
        className="MuiInputBase-input MuiInput-input RcTextFieldInput-input MuiInputBase-inputAdornedEnd"
        data-test-automation-id="eventEditEndTimePicker"
        disabled={false}
        id="PickerTextField-0"
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        placeholder="what's time?"
        readOnly={true}
        required={false}
        type="text"
        value=""
      />
      
      <button
        className="MuiButtonBase-root c2 c3 picker-action RcIconButton-root"
        disabled={false}
        onBlur={[Function]}
        onDragLeave={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onKeyUp={[Function]}
        onMouseDown={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
        tabIndex={-1}
        type="button"
      >
        <span
          className="c4 time_border icon"
        >
          <svg
            className="c5"
            viewBox="0 0 32 32"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M16 2c7.732 0 14 6.268 14 14s-6.268 14-14 14S2 23.732 2 16 8.268 2 16 2zm0 2C9.373 4 4 9.373 4 16s5.373 12 12 12 12-5.373 12-12S22.627 4 16 4zM9 17a1 1 0 0 1 0-2h6V7a1 1 0 0 1 2 0v9a1 1 0 0 1-.883.993L16 17H9z"
            />
          </svg>
          
        </span>
      </button>
    </div>
  </div>,
  .c0 {
  -webkit-clip-path: inset(100%);
  clip-path: inset(100%);
  -webkit-clip: rect(1px,1px,1px,1px);
  clip: rect(1px,1px,1px,1px);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<span
    className="c0"
    id="PickerTextField-0-instruction"
  >
    press enter or space to change the time
  </span>,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  .c0 {
  font-size: 1.5rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 32px;
  color: #121212;
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<h5
    className="MuiTypography-root c0"
    data-color="neutral.f06"
    data-variant="headline1"
  >
    Has min and max
  </h5>,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  .c6 {
  width: 1em;
  height: 1em;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
  pointer-events: none;
}

.c5 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  font-size: 24px;
}

.c4 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 20px;
  height: 20px;
  color: #666666;
  border-radius: 50%;
  -webkit-transition: background 150ms cubic-bezier(0.4,0,0.2,1) 0ms;
  transition: background 150ms cubic-bezier(0.4,0,0.2,1) 0ms;
  cursor: pointer;
  font-size: 20px;
}

.c4:active {
  color: #666666;
}

.c4.focus-visible,
.c4[data-focus-visible-added] {
  background-color: transparent;
}

.c4.focus-visible:active,
.c4[data-focus-visible-added]:active {
  color: rgba(102,102,102,0.88);
}

.c4.focus-visible:after,
.c4[data-focus-visible-added]:after {
  content: '';
  position: absolute;
  top: -4px;
  right: -4px;
  bottom: -4px;
  left: -4px;
  box-shadow: 0 0 0 1px #066FAC;
  border-radius: 50%;
  pointer-events: none;
  z-index: 1;
}

.c4.RcIconButton-persistBg {
  background-color: rgba(102,102,102,0.12);
}

.c4.RcIconButton-disabled {
  color: #B9B9B9;
}

.c4.RcIconButton-invisible {
  opacity: 0;
  visibility: hidden;
  width: 0;
  height: 0;
}

.c4.RcIconButton-outline {
  border: 1px solid #C7C7C7;
}

.c4.RcIconButton-contained {
  color: #fff;
  background-color: #666666;
}

.c4.RcIconButton-contained:before {
  content: '';
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  position: absolute;
}

.c4.RcIconButton-contained.focus-visible,
.c4.RcIconButton-contained[data-focus-visible-added] {
  color: #fff;
}

.c4.RcIconButton-contained.focus-visible:before,
.c4.RcIconButton-contained[data-focus-visible-added]:before {
  background-color: rgba(255,255,255,0.16);
}

.c4.RcIconButton-contained:active {
  color: #fff;
}

.c4 .RcIconButtonTouchRipple-ripplePulsate {
  border-radius: 0;
  -webkit-animation-name: none;
  animation-name: none;
  opacity: 0;
}

.c7 {
  -webkit-clip-path: inset(100%);
  clip-path: inset(100%);
  -webkit-clip: rect(1px,1px,1px,1px);
  clip: rect(1px,1px,1px,1px);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.c8 .c3 {
  margin-left: 12px;
}

.c9 .c3 {
  margin-left: 12px;
}

.c1 {
  width: 168px;
}

.c1 .c3 {
  margin-left: 12px;
}

.c1 .RcTextFieldInputLabel-root {
  font-size: 0.75rem;
  font-weight: 700;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 16px;
  color: #666666;
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
}

.c1 .RcTextFieldInputLabel-focused {
  color: #066FAC;
}

.c1 .RcTextFieldInput-root {
  color: #121212;
}

.c1 .RcTextFieldInput-input {
  font-size: 1rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 24px;
}

.c1 .RcTextFieldInput-input::-webkit-input-placeholder {
  color: #757575;
  opacity: 1;
}

.c1 .RcTextFieldInput-input::-moz-placeholder {
  color: #757575;
  opacity: 1;
}

.c1 .RcTextFieldInput-input:-ms-input-placeholder {
  color: #757575;
  opacity: 1;
}

.c1 .RcTextFieldInput-input::placeholder {
  color: #757575;
  opacity: 1;
}

.c1 .RcTextFieldInput-underline:before {
  border-bottom-color: #939393;
}

.c1 .RcTextFieldInput-underline:after {
  border-bottom-color: #066FAC;
}

.c1 .RcTextFieldInput-error:after {
  border-bottom-color: #BE3933;
}

.c1 .RcTextFieldInput-disabled {
  color: #B9B9B9;
  -webkit-text-fill-color: #B9B9B9;
}

.c1 .RcTextFieldInput-disabled::-webkit-input-placeholder {
  color: #B9B9B9;
}

.c1 .RcTextFieldInput-disabled::-moz-placeholder {
  color: #B9B9B9;
}

.c1 .RcTextFieldInput-disabled:-ms-input-placeholder {
  color: #B9B9B9;
}

.c1 .RcTextFieldInput-disabled::placeholder {
  color: #B9B9B9;
}

.c1 .RcTextFieldInput-disabled:before {
  border-bottom-style: solid;
  border-bottom-color: #B9B9B9;
}

.c1 .RcTextFieldInput-disabled:after {
  border-bottom-style: none;
}

.c1 .RcTextFieldFormHelperText-root {
  font-size: 0.75rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 16px;
  color: #666666;
}

.c1 .RcTextFieldFormHelperText-error,
.c1 .RcTextFieldInputLabel-error {
  color: #BE3933;
}

.c1 .RcTextFieldFormHelperText-disabled,
.c1 .RcTextFieldInputLabel-disabled {
  color: #B9B9B9;
}

.c1 input[type='search']::-ms-clear,
.c1 input[type='search']::-ms-reveal {
  display: none;
  width: 0;
  height: 0;
}

.c1 input[type='search']::-webkit-search-decoration,
.c1 input[type='search']::-webkit-search-cancel-button,
.c1 input[type='search']::-webkit-search-results-button,
.c1 input[type='search']::-webkit-search-results-decoration {
  display: none;
}

.c10 .c3 {
  margin-left: 12px;
}

.c0 {
  font-size: 0.9375rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 22px;
  color: #066FAC;
}

.c2 .picker-clear {
  display: none;
}

.c2 .RcTextFieldInput-root,
.c2 .RcTextFieldInput-input {
  cursor: pointer;
}

.c2 .RcTextFieldInput-disabled {
  cursor: auto;
}

.c2 .picker-action {
  margin: 0;
}

@media (hover:hover) and (pointer:fine) {
  .c4:hover {
    background-color: transparent;
    color: rgba(102,102,102,0.88);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c4.RcIconButton-contained:hover {
    color: #fff;
  }

  .c4.RcIconButton-contained:hover:before {
    background-color: rgba(255,255,255,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {
  .c1 .RcTextFieldInput-underline:hover:not(.RcTextFieldInput-disabled):before {
    border-bottom-color: #121212;
  }
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<div
    style={
      Object {
        "display": "flex",
      }
    }
  >
    <div>
      <p
        className="MuiTypography-root c0"
        data-color="interactive.f01"
        data-variant="body1"
      >
        Timestamp Mode
      </p>
      <br />
      <div
        className="MuiFormControl-root MuiTextField-root RcTextField-root c1 c2 "
      >
        <div
          className="MuiInputBase-root MuiInput-root RcTextFieldInput-root MuiInput-underline RcTextFieldInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
          onClick={[Function]}
        >
          <input
            aria-describedby="PickerTextField-0-helper-text PickerTextField-0-instruction"
            aria-haspopup={true}
            aria-invalid={false}
            autoFocus={false}
            className="MuiInputBase-input MuiInput-input RcTextFieldInput-input MuiInputBase-inputAdornedEnd"
            disabled={false}
            id="PickerTextField-0"
            onAnimationStart={[Function]}
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            placeholder="what's time?"
            readOnly={true}
            required={false}
            type="text"
            value=""
          />
          
          <button
            className="MuiButtonBase-root c3 c4 picker-action RcIconButton-root"
            disabled={false}
            onBlur={[Function]}
            onDragLeave={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            tabIndex={-1}
            type="button"
          >
            <span
              className="c5 time_border icon"
            >
              <svg
                className="c6"
                viewBox="0 0 32 32"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M16 2c7.732 0 14 6.268 14 14s-6.268 14-14 14S2 23.732 2 16 8.268 2 16 2zm0 2C9.373 4 4 9.373 4 16s5.373 12 12 12 12-5.373 12-12S22.627 4 16 4zM9 17a1 1 0 0 1 0-2h6V7a1 1 0 0 1 2 0v9a1 1 0 0 1-.883.993L16 17H9z"
                />
              </svg>
              
            </span>
          </button>
        </div>
      </div>
      <span
        className="c7"
        id="PickerTextField-0-instruction"
      >
        press enter or space to change the time
      </span>
    </div>
    <div
      style={
        Object {
          "marginLeft": "30px",
        }
      }
    >
      <p
        className="MuiTypography-root c0"
        data-color="interactive.f01"
        data-variant="body1"
      >
        Date Mode
      </p>
      <br />
      <div
        className="MuiFormControl-root MuiTextField-root RcTextField-root c1 c2 "
      >
        <div
          className="MuiInputBase-root MuiInput-root RcTextFieldInput-root MuiInput-underline RcTextFieldInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
          onClick={[Function]}
        >
          <input
            aria-describedby="PickerTextField-0-helper-text PickerTextField-0-instruction"
            aria-haspopup={true}
            aria-invalid={false}
            autoFocus={false}
            className="MuiInputBase-input MuiInput-input RcTextFieldInput-input MuiInputBase-inputAdornedEnd"
            data-test-automation-id="eventEditEndTimePicker"
            disabled={false}
            id="PickerTextField-0"
            onAnimationStart={[Function]}
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            placeholder="what's time?"
            readOnly={true}
            required={false}
            type="text"
            value=""
          />
          
          <button
            className="MuiButtonBase-root c3 c4 picker-action RcIconButton-root"
            disabled={false}
            onBlur={[Function]}
            onDragLeave={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            tabIndex={-1}
            type="button"
          >
            <span
              className="c5 time_border icon"
            >
              <svg
                className="c6"
                viewBox="0 0 32 32"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M16 2c7.732 0 14 6.268 14 14s-6.268 14-14 14S2 23.732 2 16 8.268 2 16 2zm0 2C9.373 4 4 9.373 4 16s5.373 12 12 12 12-5.373 12-12S22.627 4 16 4zM9 17a1 1 0 0 1 0-2h6V7a1 1 0 0 1 2 0v9a1 1 0 0 1-.883.993L16 17H9z"
                />
              </svg>
              
            </span>
          </button>
        </div>
      </div>
      <span
        className="c7"
        id="PickerTextField-0-instruction"
      >
        press enter or space to change the time
      </span>
    </div>
  </div>,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  .c0 {
  font-size: 1.5rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 32px;
  color: #121212;
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<h5
    className="MuiTypography-root c0"
    data-color="neutral.f06"
    data-variant="headline1"
  >
    Twelve Hour System
  </h5>,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  .c6 {
  width: 1em;
  height: 1em;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
  pointer-events: none;
}

.c5 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  font-size: 24px;
}

.c4 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 20px;
  height: 20px;
  color: #666666;
  border-radius: 50%;
  -webkit-transition: background 150ms cubic-bezier(0.4,0,0.2,1) 0ms;
  transition: background 150ms cubic-bezier(0.4,0,0.2,1) 0ms;
  cursor: pointer;
  font-size: 20px;
}

.c4:active {
  color: #666666;
}

.c4.focus-visible,
.c4[data-focus-visible-added] {
  background-color: transparent;
}

.c4.focus-visible:active,
.c4[data-focus-visible-added]:active {
  color: rgba(102,102,102,0.88);
}

.c4.focus-visible:after,
.c4[data-focus-visible-added]:after {
  content: '';
  position: absolute;
  top: -4px;
  right: -4px;
  bottom: -4px;
  left: -4px;
  box-shadow: 0 0 0 1px #066FAC;
  border-radius: 50%;
  pointer-events: none;
  z-index: 1;
}

.c4.RcIconButton-persistBg {
  background-color: rgba(102,102,102,0.12);
}

.c4.RcIconButton-disabled {
  color: #B9B9B9;
}

.c4.RcIconButton-invisible {
  opacity: 0;
  visibility: hidden;
  width: 0;
  height: 0;
}

.c4.RcIconButton-outline {
  border: 1px solid #C7C7C7;
}

.c4.RcIconButton-contained {
  color: #fff;
  background-color: #666666;
}

.c4.RcIconButton-contained:before {
  content: '';
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  position: absolute;
}

.c4.RcIconButton-contained.focus-visible,
.c4.RcIconButton-contained[data-focus-visible-added] {
  color: #fff;
}

.c4.RcIconButton-contained.focus-visible:before,
.c4.RcIconButton-contained[data-focus-visible-added]:before {
  background-color: rgba(255,255,255,0.16);
}

.c4.RcIconButton-contained:active {
  color: #fff;
}

.c4 .RcIconButtonTouchRipple-ripplePulsate {
  border-radius: 0;
  -webkit-animation-name: none;
  animation-name: none;
  opacity: 0;
}

.c7 {
  -webkit-clip-path: inset(100%);
  clip-path: inset(100%);
  -webkit-clip: rect(1px,1px,1px,1px);
  clip: rect(1px,1px,1px,1px);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.c8 .c3 {
  margin-left: 12px;
}

.c9 .c3 {
  margin-left: 12px;
}

.c1 {
  width: 168px;
}

.c1 .c3 {
  margin-left: 12px;
}

.c1 .RcTextFieldInputLabel-root {
  font-size: 0.75rem;
  font-weight: 700;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 16px;
  color: #666666;
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
}

.c1 .RcTextFieldInputLabel-focused {
  color: #066FAC;
}

.c1 .RcTextFieldInput-root {
  color: #121212;
}

.c1 .RcTextFieldInput-input {
  font-size: 1rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 24px;
}

.c1 .RcTextFieldInput-input::-webkit-input-placeholder {
  color: #757575;
  opacity: 1;
}

.c1 .RcTextFieldInput-input::-moz-placeholder {
  color: #757575;
  opacity: 1;
}

.c1 .RcTextFieldInput-input:-ms-input-placeholder {
  color: #757575;
  opacity: 1;
}

.c1 .RcTextFieldInput-input::placeholder {
  color: #757575;
  opacity: 1;
}

.c1 .RcTextFieldInput-underline:before {
  border-bottom-color: #939393;
}

.c1 .RcTextFieldInput-underline:after {
  border-bottom-color: #066FAC;
}

.c1 .RcTextFieldInput-error:after {
  border-bottom-color: #BE3933;
}

.c1 .RcTextFieldInput-disabled {
  color: #B9B9B9;
  -webkit-text-fill-color: #B9B9B9;
}

.c1 .RcTextFieldInput-disabled::-webkit-input-placeholder {
  color: #B9B9B9;
}

.c1 .RcTextFieldInput-disabled::-moz-placeholder {
  color: #B9B9B9;
}

.c1 .RcTextFieldInput-disabled:-ms-input-placeholder {
  color: #B9B9B9;
}

.c1 .RcTextFieldInput-disabled::placeholder {
  color: #B9B9B9;
}

.c1 .RcTextFieldInput-disabled:before {
  border-bottom-style: solid;
  border-bottom-color: #B9B9B9;
}

.c1 .RcTextFieldInput-disabled:after {
  border-bottom-style: none;
}

.c1 .RcTextFieldFormHelperText-root {
  font-size: 0.75rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 16px;
  color: #666666;
}

.c1 .RcTextFieldFormHelperText-error,
.c1 .RcTextFieldInputLabel-error {
  color: #BE3933;
}

.c1 .RcTextFieldFormHelperText-disabled,
.c1 .RcTextFieldInputLabel-disabled {
  color: #B9B9B9;
}

.c1 input[type='search']::-ms-clear,
.c1 input[type='search']::-ms-reveal {
  display: none;
  width: 0;
  height: 0;
}

.c1 input[type='search']::-webkit-search-decoration,
.c1 input[type='search']::-webkit-search-cancel-button,
.c1 input[type='search']::-webkit-search-results-button,
.c1 input[type='search']::-webkit-search-results-decoration {
  display: none;
}

.c10 .c3 {
  margin-left: 12px;
}

.c0 {
  font-size: 0.9375rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 22px;
  color: #066FAC;
}

.c2 .picker-clear {
  display: none;
}

.c2 .RcTextFieldInput-root,
.c2 .RcTextFieldInput-input {
  cursor: pointer;
}

.c2 .RcTextFieldInput-disabled {
  cursor: auto;
}

.c2 .picker-action {
  margin: 0;
}

@media (hover:hover) and (pointer:fine) {
  .c4:hover {
    background-color: transparent;
    color: rgba(102,102,102,0.88);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c4.RcIconButton-contained:hover {
    color: #fff;
  }

  .c4.RcIconButton-contained:hover:before {
    background-color: rgba(255,255,255,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {
  .c1 .RcTextFieldInput-underline:hover:not(.RcTextFieldInput-disabled):before {
    border-bottom-color: #121212;
  }
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<div
    style={
      Object {
        "display": "flex",
      }
    }
  >
    <div>
      <p
        className="MuiTypography-root c0"
        data-color="interactive.f01"
        data-variant="body1"
      >
        Timestamp Mode
      </p>
      <br />
      <div
        className="MuiFormControl-root MuiTextField-root RcTextField-root c1 c2 "
      >
        <div
          className="MuiInputBase-root MuiInput-root RcTextFieldInput-root MuiInput-underline RcTextFieldInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
          onClick={[Function]}
        >
          <input
            aria-describedby="PickerTextField-0-helper-text PickerTextField-0-instruction"
            aria-haspopup={true}
            aria-invalid={false}
            autoFocus={false}
            className="MuiInputBase-input MuiInput-input RcTextFieldInput-input MuiInputBase-inputAdornedEnd"
            disabled={false}
            id="PickerTextField-0"
            onAnimationStart={[Function]}
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            placeholder="what's time?"
            readOnly={true}
            required={false}
            type="text"
            value=""
          />
          
          <button
            className="MuiButtonBase-root c3 c4 picker-action RcIconButton-root"
            disabled={false}
            onBlur={[Function]}
            onDragLeave={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            tabIndex={-1}
            type="button"
          >
            <span
              className="c5 time_border icon"
            >
              <svg
                className="c6"
                viewBox="0 0 32 32"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M16 2c7.732 0 14 6.268 14 14s-6.268 14-14 14S2 23.732 2 16 8.268 2 16 2zm0 2C9.373 4 4 9.373 4 16s5.373 12 12 12 12-5.373 12-12S22.627 4 16 4zM9 17a1 1 0 0 1 0-2h6V7a1 1 0 0 1 2 0v9a1 1 0 0 1-.883.993L16 17H9z"
                />
              </svg>
              
            </span>
          </button>
        </div>
      </div>
      <span
        className="c7"
        id="PickerTextField-0-instruction"
      >
        press enter or space to change the time
      </span>
    </div>
    <div
      style={
        Object {
          "marginLeft": "30px",
        }
      }
    >
      <p
        className="MuiTypography-root c0"
        data-color="interactive.f01"
        data-variant="body1"
      >
        Date Mode
      </p>
      <br />
      <div
        className="MuiFormControl-root MuiTextField-root RcTextField-root c1 c2 "
      >
        <div
          className="MuiInputBase-root MuiInput-root RcTextFieldInput-root MuiInput-underline RcTextFieldInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
          onClick={[Function]}
        >
          <input
            aria-describedby="PickerTextField-0-helper-text PickerTextField-0-instruction"
            aria-haspopup={true}
            aria-invalid={false}
            autoFocus={false}
            className="MuiInputBase-input MuiInput-input RcTextFieldInput-input MuiInputBase-inputAdornedEnd"
            data-test-automation-id="eventEditEndTimePicker"
            disabled={false}
            id="PickerTextField-0"
            onAnimationStart={[Function]}
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            placeholder="what's time?"
            readOnly={true}
            required={false}
            type="text"
            value=""
          />
          
          <button
            className="MuiButtonBase-root c3 c4 picker-action RcIconButton-root"
            disabled={false}
            onBlur={[Function]}
            onDragLeave={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            tabIndex={-1}
            type="button"
          >
            <span
              className="c5 time_border icon"
            >
              <svg
                className="c6"
                viewBox="0 0 32 32"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M16 2c7.732 0 14 6.268 14 14s-6.268 14-14 14S2 23.732 2 16 8.268 2 16 2zm0 2C9.373 4 4 9.373 4 16s5.373 12 12 12 12-5.373 12-12S22.627 4 16 4zM9 17a1 1 0 0 1 0-2h6V7a1 1 0 0 1 2 0v9a1 1 0 0 1-.883.993L16 17H9z"
                />
              </svg>
              
            </span>
          </button>
        </div>
      </div>
      <span
        className="c7"
        id="PickerTextField-0-instruction"
      >
        press enter or space to change the time
      </span>
    </div>
  </div>,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  .c0 {
  font-size: 0.9375rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 22px;
  color: #066FAC;
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<p
    className="MuiTypography-root c0"
    data-color="interactive.f01"
    data-variant="body1"
  >
    With Default Picker Value
  </p>,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  .c5 {
  width: 1em;
  height: 1em;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
  pointer-events: none;
}

.c4 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  font-size: 24px;
}

.c3 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 20px;
  height: 20px;
  color: #666666;
  border-radius: 50%;
  -webkit-transition: background 150ms cubic-bezier(0.4,0,0.2,1) 0ms;
  transition: background 150ms cubic-bezier(0.4,0,0.2,1) 0ms;
  cursor: pointer;
  font-size: 20px;
}

.c3:active {
  color: #666666;
}

.c3.focus-visible,
.c3[data-focus-visible-added] {
  background-color: transparent;
}

.c3.focus-visible:active,
.c3[data-focus-visible-added]:active {
  color: rgba(102,102,102,0.88);
}

.c3.focus-visible:after,
.c3[data-focus-visible-added]:after {
  content: '';
  position: absolute;
  top: -4px;
  right: -4px;
  bottom: -4px;
  left: -4px;
  box-shadow: 0 0 0 1px #066FAC;
  border-radius: 50%;
  pointer-events: none;
  z-index: 1;
}

.c3.RcIconButton-persistBg {
  background-color: rgba(102,102,102,0.12);
}

.c3.RcIconButton-disabled {
  color: #B9B9B9;
}

.c3.RcIconButton-invisible {
  opacity: 0;
  visibility: hidden;
  width: 0;
  height: 0;
}

.c3.RcIconButton-outline {
  border: 1px solid #C7C7C7;
}

.c3.RcIconButton-contained {
  color: #fff;
  background-color: #666666;
}

.c3.RcIconButton-contained:before {
  content: '';
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  position: absolute;
}

.c3.RcIconButton-contained.focus-visible,
.c3.RcIconButton-contained[data-focus-visible-added] {
  color: #fff;
}

.c3.RcIconButton-contained.focus-visible:before,
.c3.RcIconButton-contained[data-focus-visible-added]:before {
  background-color: rgba(255,255,255,0.16);
}

.c3.RcIconButton-contained:active {
  color: #fff;
}

.c3 .RcIconButtonTouchRipple-ripplePulsate {
  border-radius: 0;
  -webkit-animation-name: none;
  animation-name: none;
  opacity: 0;
}

.c6 .c2 {
  margin-left: 12px;
}

.c7 .c2 {
  margin-left: 12px;
}

.c8 .c2 {
  margin-left: 12px;
}

.c0 {
  width: 168px;
}

.c0 .c2 {
  margin-left: 12px;
}

.c0.RcTextField-root {
  margin: 0 0 16px 0;
}

.c0 .RcTextFieldInputLabel-root {
  font-size: 0.75rem;
  font-weight: 700;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 16px;
  color: #666666;
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
}

.c0 .RcTextFieldInputLabel-focused {
  color: #066FAC;
}

.c0 .RcTextFieldInput-root {
  color: #121212;
}

.c0 .RcTextFieldInput-input {
  font-size: 1rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 24px;
}

.c0 .RcTextFieldInput-input::-webkit-input-placeholder {
  color: #757575;
  opacity: 1;
}

.c0 .RcTextFieldInput-input::-moz-placeholder {
  color: #757575;
  opacity: 1;
}

.c0 .RcTextFieldInput-input:-ms-input-placeholder {
  color: #757575;
  opacity: 1;
}

.c0 .RcTextFieldInput-input::placeholder {
  color: #757575;
  opacity: 1;
}

.c0 .RcTextFieldInput-underline:before {
  border-bottom-color: #939393;
}

.c0 .RcTextFieldInput-underline:after {
  border-bottom-color: #066FAC;
}

.c0 .RcTextFieldInput-error:after {
  border-bottom-color: #BE3933;
}

.c0 .RcTextFieldInput-disabled {
  color: #B9B9B9;
  -webkit-text-fill-color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled::-webkit-input-placeholder {
  color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled::-moz-placeholder {
  color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled:-ms-input-placeholder {
  color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled::placeholder {
  color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled:before {
  border-bottom-style: solid;
  border-bottom-color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled:after {
  border-bottom-style: none;
}

.c0 .RcTextFieldFormHelperText-root {
  font-size: 0.75rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 16px;
  color: #666666;
}

.c0 .RcTextFieldFormHelperText-error,
.c0 .RcTextFieldInputLabel-error {
  color: #BE3933;
}

.c0 .RcTextFieldFormHelperText-disabled,
.c0 .RcTextFieldInputLabel-disabled {
  color: #B9B9B9;
}

.c0 input[type='search']::-ms-clear,
.c0 input[type='search']::-ms-reveal {
  display: none;
  width: 0;
  height: 0;
}

.c0 input[type='search']::-webkit-search-decoration,
.c0 input[type='search']::-webkit-search-cancel-button,
.c0 input[type='search']::-webkit-search-results-button,
.c0 input[type='search']::-webkit-search-results-decoration {
  display: none;
}

.c1 .picker-clear {
  display: none;
}

.c1 .RcTextFieldInput-root,
.c1 .RcTextFieldInput-input {
  cursor: pointer;
}

.c1 .RcTextFieldInput-disabled {
  cursor: auto;
}

.c1 .picker-action {
  margin: 0;
}

@media (hover:hover) and (pointer:fine) {
  .c3:hover {
    background-color: transparent;
    color: rgba(102,102,102,0.88);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c3.RcIconButton-contained:hover {
    color: #fff;
  }

  .c3.RcIconButton-contained:hover:before {
    background-color: rgba(255,255,255,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {
  .c0 .RcTextFieldInput-underline:hover:not(.RcTextFieldInput-disabled):before {
    border-bottom-color: #121212;
  }
}

@media (hover:hover) and (pointer:fine) {

}

<div
    className="MuiFormControl-root MuiTextField-root RcTextField-root c0 c1 "
  >
    <div
      className="MuiInputBase-root MuiInput-root RcTextFieldInput-root MuiInput-underline RcTextFieldInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
      onClick={[Function]}
    >
      <input
        aria-describedby="PickerTextField-0-helper-text PickerTextField-0-instruction"
        aria-haspopup={true}
        aria-invalid={false}
        autoFocus={false}
        className="MuiInputBase-input MuiInput-input RcTextFieldInput-input MuiInputBase-inputAdornedEnd"
        disabled={false}
        id="PickerTextField-0"
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        placeholder="what's time?"
        readOnly={true}
        required={false}
        type="text"
        value=""
      />
      
      <button
        className="MuiButtonBase-root c2 c3 picker-action RcIconButton-root"
        disabled={false}
        onBlur={[Function]}
        onDragLeave={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onKeyUp={[Function]}
        onMouseDown={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
        tabIndex={-1}
        type="button"
      >
        <span
          className="c4 time_border icon"
        >
          <svg
            className="c5"
            viewBox="0 0 32 32"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M16 2c7.732 0 14 6.268 14 14s-6.268 14-14 14S2 23.732 2 16 8.268 2 16 2zm0 2C9.373 4 4 9.373 4 16s5.373 12 12 12 12-5.373 12-12S22.627 4 16 4zM9 17a1 1 0 0 1 0-2h6V7a1 1 0 0 1 2 0v9a1 1 0 0 1-.883.993L16 17H9z"
            />
          </svg>
          
        </span>
      </button>
    </div>
  </div>,
  .c0 {
  -webkit-clip-path: inset(100%);
  clip-path: inset(100%);
  -webkit-clip: rect(1px,1px,1px,1px);
  clip: rect(1px,1px,1px,1px);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<span
    className="c0"
    id="PickerTextField-0-instruction"
  >
    press enter or space to change the time
  </span>,
]
`;

exports[`Storyshots ðŸš€ Cleanup Components/Forms/TimePicker TimePicker with default picker value 1`] = `
Array [
  .c5 {
  width: 1em;
  height: 1em;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
  pointer-events: none;
}

.c4 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  font-size: 24px;
}

.c3 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 20px;
  height: 20px;
  color: #666666;
  border-radius: 50%;
  -webkit-transition: background 150ms cubic-bezier(0.4,0,0.2,1) 0ms;
  transition: background 150ms cubic-bezier(0.4,0,0.2,1) 0ms;
  cursor: pointer;
  font-size: 20px;
}

.c3:active {
  color: #666666;
}

.c3.focus-visible,
.c3[data-focus-visible-added] {
  background-color: transparent;
}

.c3.focus-visible:active,
.c3[data-focus-visible-added]:active {
  color: rgba(102,102,102,0.88);
}

.c3.focus-visible:after,
.c3[data-focus-visible-added]:after {
  content: '';
  position: absolute;
  top: -4px;
  right: -4px;
  bottom: -4px;
  left: -4px;
  box-shadow: 0 0 0 1px #066FAC;
  border-radius: 50%;
  pointer-events: none;
  z-index: 1;
}

.c3.RcIconButton-persistBg {
  background-color: rgba(102,102,102,0.12);
}

.c3.RcIconButton-disabled {
  color: #B9B9B9;
}

.c3.RcIconButton-invisible {
  opacity: 0;
  visibility: hidden;
  width: 0;
  height: 0;
}

.c3.RcIconButton-outline {
  border: 1px solid #C7C7C7;
}

.c3.RcIconButton-contained {
  color: #fff;
  background-color: #666666;
}

.c3.RcIconButton-contained:before {
  content: '';
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  position: absolute;
}

.c3.RcIconButton-contained.focus-visible,
.c3.RcIconButton-contained[data-focus-visible-added] {
  color: #fff;
}

.c3.RcIconButton-contained.focus-visible:before,
.c3.RcIconButton-contained[data-focus-visible-added]:before {
  background-color: rgba(255,255,255,0.16);
}

.c3.RcIconButton-contained:active {
  color: #fff;
}

.c3 .RcIconButtonTouchRipple-ripplePulsate {
  border-radius: 0;
  -webkit-animation-name: none;
  animation-name: none;
  opacity: 0;
}

.c0 {
  width: 168px;
}

.c0 .c2 {
  margin-left: 12px;
}

.c0 .RcTextFieldInputLabel-root {
  font-size: 0.75rem;
  font-weight: 700;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 16px;
  color: #666666;
  -webkit-transform: scale(1);
  -ms-transform: scale(1);
  transform: scale(1);
}

.c0 .RcTextFieldInputLabel-focused {
  color: #066FAC;
}

.c0 .RcTextFieldInput-root {
  color: #121212;
}

.c0 .RcTextFieldInput-input {
  font-size: 1rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 24px;
}

.c0 .RcTextFieldInput-input::-webkit-input-placeholder {
  color: #757575;
  opacity: 1;
}

.c0 .RcTextFieldInput-input::-moz-placeholder {
  color: #757575;
  opacity: 1;
}

.c0 .RcTextFieldInput-input:-ms-input-placeholder {
  color: #757575;
  opacity: 1;
}

.c0 .RcTextFieldInput-input::placeholder {
  color: #757575;
  opacity: 1;
}

.c0 .RcTextFieldInput-underline:before {
  border-bottom-color: #939393;
}

.c0 .RcTextFieldInput-underline:after {
  border-bottom-color: #066FAC;
}

.c0 .RcTextFieldInput-error:after {
  border-bottom-color: #BE3933;
}

.c0 .RcTextFieldInput-disabled {
  color: #B9B9B9;
  -webkit-text-fill-color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled::-webkit-input-placeholder {
  color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled::-moz-placeholder {
  color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled:-ms-input-placeholder {
  color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled::placeholder {
  color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled:before {
  border-bottom-style: solid;
  border-bottom-color: #B9B9B9;
}

.c0 .RcTextFieldInput-disabled:after {
  border-bottom-style: none;
}

.c0 .RcTextFieldFormHelperText-root {
  font-size: 0.75rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 16px;
  color: #666666;
}

.c0 .RcTextFieldFormHelperText-error,
.c0 .RcTextFieldInputLabel-error {
  color: #BE3933;
}

.c0 .RcTextFieldFormHelperText-disabled,
.c0 .RcTextFieldInputLabel-disabled {
  color: #B9B9B9;
}

.c0 input[type='search']::-ms-clear,
.c0 input[type='search']::-ms-reveal {
  display: none;
  width: 0;
  height: 0;
}

.c0 input[type='search']::-webkit-search-decoration,
.c0 input[type='search']::-webkit-search-cancel-button,
.c0 input[type='search']::-webkit-search-results-button,
.c0 input[type='search']::-webkit-search-results-decoration {
  display: none;
}

.c1 .picker-clear {
  display: none;
}

.c1 .RcTextFieldInput-root,
.c1 .RcTextFieldInput-input {
  cursor: pointer;
}

.c1 .RcTextFieldInput-disabled {
  cursor: auto;
}

.c1 .picker-action {
  margin: 0;
}

@media (hover:hover) and (pointer:fine) {
  .c3:hover {
    background-color: transparent;
    color: rgba(102,102,102,0.88);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c3.RcIconButton-contained:hover {
    color: #fff;
  }

  .c3.RcIconButton-contained:hover:before {
    background-color: rgba(255,255,255,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c0 .RcTextFieldInput-underline:hover:not(.RcTextFieldInput-disabled):before {
    border-bottom-color: #121212;
  }
}

<div
    className="MuiFormControl-root MuiTextField-root RcTextField-root c0 c1 "
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root RcTextFieldInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
      data-shrink={true}
      htmlFor="PickerTextField-0"
      id="PickerTextField-0-label"
    >
      Time
    </label>
    <div
      className="MuiInputBase-root MuiInput-root RcTextFieldInput-root MuiInput-underline RcTextFieldInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
      onClick={[Function]}
    >
      <input
        aria-describedby="PickerTextField-0-helper-text PickerTextField-0-instruction"
        aria-haspopup={true}
        aria-invalid={false}
        autoFocus={false}
        className="MuiInputBase-input MuiInput-input RcTextFieldInput-input MuiInputBase-inputAdornedEnd"
        disabled={false}
        id="PickerTextField-0"
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        placeholder="what's time?"
        readOnly={true}
        required={false}
        type="text"
        value=""
      />
      
      <button
        className="MuiButtonBase-root c2 c3 picker-action RcIconButton-root"
        disabled={false}
        onBlur={[Function]}
        onDragLeave={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onKeyUp={[Function]}
        onMouseDown={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
        tabIndex={-1}
        type="button"
      >
        <span
          className="c4 time_border icon"
        >
          <svg
            className="c5"
            viewBox="0 0 32 32"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M16 2c7.732 0 14 6.268 14 14s-6.268 14-14 14S2 23.732 2 16 8.268 2 16 2zm0 2C9.373 4 4 9.373 4 16s5.373 12 12 12 12-5.373 12-12S22.627 4 16 4zM9 17a1 1 0 0 1 0-2h6V7a1 1 0 0 1 2 0v9a1 1 0 0 1-.883.993L16 17H9z"
            />
          </svg>
          
        </span>
      </button>
    </div>
  </div>,
  .c0 {
  -webkit-clip-path: inset(100%);
  clip-path: inset(100%);
  -webkit-clip: rect(1px,1px,1px,1px);
  clip: rect(1px,1px,1px,1px);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<span
    className="c0"
    id="PickerTextField-0-instruction"
  />,
]
`;
