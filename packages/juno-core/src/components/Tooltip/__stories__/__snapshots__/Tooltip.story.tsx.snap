// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Storyshots ðŸš€ Cleanup Components/Tooltip Tooltip 1`] = `
.c0 {
  text-transform: none;
  font-size: 0.9375rem;
  font-weight: 700;
  font-family: Lato,Helvetica,Arial,sans-serif;
  text-align: center;
  box-shadow: unset;
  min-width: 96px;
  min-height: 36px;
  padding: 0px 16px;
}

.c0 .RcButton-startIcon {
  margin-right: 8px;
}

.c0 .RcButton-endIcon {
  margin-left: 8px;
}

.c0.RcButton-text {
  color: #066FAC;
}

.c0.RcButton-text.RcButton-disabled {
  color: #C7C7C7;
}

.c0.RcButton-contained {
  color: #fff;
  background-color: #066FAC;
}

.c0.RcButton-contained.RcButton-disabled {
  background-color: #E5E5E5;
  color: #939393;
}

.c0.RcButton-outlined {
  color: #066FAC;
  border-color: #066FAC;
  padding: 0px 15px;
}

.c0.RcButton-outlined.RcButton-disabled {
  color: #C7C7C7;
  border-color: #C7C7C7;
}

.c0.RcButton-outlined:after {
  top: -1px;
  bottom: -1px;
  left: -1px;
  right: -1px;
  border: 1px solid transparent;
}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-text:hover {
    background-color: rgba(6,111,172,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-contained:hover {
    background-color: rgba(6,111,172,0.92);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-outlined:hover {
    background-color: rgba(6,111,172,0.08);
  }
}

<div
  className="MuiBox-root MuiBox-root-374"
>
  <button
    aria-describedby={null}
    className="MuiButtonBase-root MuiButton-root MuiButton-contained RcButton-contained c0"
    disabled={false}
    onBlur={[Function]}
    onDragLeave={[Function]}
    onFocus={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseDown={[Function]}
    onMouseLeave={[Function]}
    onMouseOver={[Function]}
    onMouseUp={[Function]}
    onTouchEnd={[Function]}
    onTouchMove={[Function]}
    onTouchStart={[Function]}
    tabIndex={0}
    title="I am arrow tip"
    type="button"
  >
    <span
      className="MuiButton-label"
    >
      Tooltip when hover or keyboard focus
    </span>
    <span
      className="MuiTouchRipple-root"
    />
  </button>
</div>
`;

exports[`Storyshots ðŸš€ Cleanup Components/Tooltip Tooltip Sizes 1`] = `null`;

exports[`Storyshots ðŸš€ Cleanup Components/Tooltip Tooltip With Custom Color 1`] = `
Array [
  .c0 {
  text-transform: none;
  font-size: 0.9375rem;
  font-weight: 700;
  font-family: Lato,Helvetica,Arial,sans-serif;
  text-align: center;
  box-shadow: unset;
  min-width: 96px;
  min-height: 36px;
  padding: 0px 16px;
}

.c0 .RcButton-startIcon {
  margin-right: 8px;
}

.c0 .RcButton-endIcon {
  margin-left: 8px;
}

.c0.RcButton-text {
  color: #066FAC;
}

.c0.RcButton-text.RcButton-disabled {
  color: #C7C7C7;
}

.c0.RcButton-contained {
  color: #fff;
  background-color: #066FAC;
}

.c0.RcButton-contained.RcButton-disabled {
  background-color: #E5E5E5;
  color: #939393;
}

.c0.RcButton-outlined {
  color: #066FAC;
  border-color: #066FAC;
  padding: 0px 15px;
}

.c0.RcButton-outlined.RcButton-disabled {
  color: #C7C7C7;
  border-color: #C7C7C7;
}

.c0.RcButton-outlined:after {
  top: -1px;
  bottom: -1px;
  left: -1px;
  right: -1px;
  border: 1px solid transparent;
}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-text:hover {
    background-color: rgba(6,111,172,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-contained:hover {
    background-color: rgba(6,111,172,0.92);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-outlined:hover {
    background-color: rgba(6,111,172,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<button
    aria-describedby={null}
    className="MuiButtonBase-root MuiButton-root MuiButton-contained RcButton-contained c0"
    disabled={false}
    onBlur={[Function]}
    onDragLeave={[Function]}
    onFocus={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseDown={[Function]}
    onMouseLeave={[Function]}
    onMouseOver={[Function]}
    onMouseUp={[Function]}
    onTouchEnd={[Function]}
    onTouchMove={[Function]}
    onTouchStart={[Function]}
    tabIndex={0}
    title="Add"
    type="button"
  >
    <span
      className="MuiButton-label"
    >
      Open
    </span>
    <span
      className="MuiTouchRipple-root"
    />
  </button>,
  .c0 {
  text-transform: none;
  font-size: 0.9375rem;
  font-weight: 700;
  font-family: Lato,Helvetica,Arial,sans-serif;
  text-align: center;
  box-shadow: unset;
  min-width: 96px;
  min-height: 36px;
  padding: 0px 16px;
}

.c0 .RcButton-startIcon {
  margin-right: 8px;
}

.c0 .RcButton-endIcon {
  margin-left: 8px;
}

.c0.RcButton-text {
  color: #FF8800;
}

.c0.RcButton-text.RcButton-disabled {
  color: #C7C7C7;
}

.c0.RcButton-contained {
  color: rgba(0,0,0,0.87);
  background-color: #FF8800;
}

.c0.RcButton-contained.RcButton-disabled {
  background-color: #E5E5E5;
  color: #939393;
}

.c0.RcButton-outlined {
  color: #FF8800;
  border-color: #FF8800;
  padding: 0px 15px;
}

.c0.RcButton-outlined.RcButton-disabled {
  color: #C7C7C7;
  border-color: #C7C7C7;
}

.c0.RcButton-outlined:after {
  top: -1px;
  bottom: -1px;
  left: -1px;
  right: -1px;
  border: 1px solid transparent;
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-text:hover {
    background-color: rgba(255,136,0,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-contained:hover {
    background-color: rgba(255,136,0,0.92);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-outlined:hover {
    background-color: rgba(255,136,0,0.08);
  }
}

<button
    aria-describedby={null}
    className="MuiButtonBase-root MuiButton-root MuiButton-contained RcButton-contained c0"
    disabled={false}
    onBlur={[Function]}
    onDragLeave={[Function]}
    onFocus={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseDown={[Function]}
    onMouseLeave={[Function]}
    onMouseOver={[Function]}
    onMouseUp={[Function]}
    onTouchEnd={[Function]}
    onTouchMove={[Function]}
    onTouchStart={[Function]}
    style={
      Object {
        "marginLeft": "1em",
      }
    }
    tabIndex={0}
    title="Add"
    type="button"
  >
    <span
      className="MuiButton-label"
    >
      Close
    </span>
    <span
      className="MuiTouchRipple-root"
    />
  </button>,
]
`;

exports[`Storyshots ðŸš€ Cleanup Components/Tooltip Tooltip With Disabled Children 1`] = `
Array [
  .c0 {
  font-size: 1.5rem;
  font-weight: 400;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 32px;
  color: #121212;
}

.c1 {
  font-family: Lato,Helvetica,Arial,sans-serif;
}

.c2.highlight-term {
  color: #121212 !important;
  background-color: #FFDFB1 !important;
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<h5
    className="MuiTypography-root c0 MuiTypography-paragraph MuiTypography-displayBlock"
    data-color="neutral.f06"
    data-variant="headline1"
  >
    ignorePointer
     
    <span
      className="MuiTypography-root c1 c2 highlight-term MuiTypography-noWrap"
      data-color="initial"
      data-variant="inherit"
      title="that will add a span wrap children component,"
    >
      that will add a span wrap children component,
    </span>
  </h5>,
  .c0 {
  text-transform: none;
  font-size: 0.9375rem;
  font-weight: 700;
  font-family: Lato,Helvetica,Arial,sans-serif;
  text-align: center;
  box-shadow: unset;
  min-width: 96px;
  min-height: 36px;
  padding: 0px 16px;
}

.c0 .RcButton-startIcon {
  margin-right: 8px;
}

.c0 .RcButton-endIcon {
  margin-left: 8px;
}

.c0.RcButton-text {
  color: #FF8800;
}

.c0.RcButton-text.RcButton-disabled {
  color: #C7C7C7;
}

.c0.RcButton-contained {
  color: rgba(0,0,0,0.87);
  background-color: #FF8800;
}

.c0.RcButton-contained.RcButton-disabled {
  background-color: #E5E5E5;
  color: #939393;
}

.c0.RcButton-outlined {
  color: #FF8800;
  border-color: #FF8800;
  padding: 0px 15px;
}

.c0.RcButton-outlined.RcButton-disabled {
  color: #C7C7C7;
  border-color: #C7C7C7;
}

.c0.RcButton-outlined:after {
  top: -1px;
  bottom: -1px;
  left: -1px;
  right: -1px;
  border: 1px solid transparent;
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-text:hover {
    background-color: rgba(255,136,0,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-contained:hover {
    background-color: rgba(255,136,0,0.92);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-outlined:hover {
    background-color: rgba(255,136,0,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<button
    className="MuiButtonBase-root MuiButton-root MuiButton-contained RcButton-contained c0"
    disabled={false}
    onBlur={[Function]}
    onClick={[Function]}
    onDragLeave={[Function]}
    onFocus={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseDown={[Function]}
    onMouseLeave={[Function]}
    onMouseUp={[Function]}
    onTouchEnd={[Function]}
    onTouchMove={[Function]}
    onTouchStart={[Function]}
    tabIndex={0}
    type="button"
  >
    <span
      className="MuiButton-label"
    >
      Toggle disabled state
    </span>
    <span
      className="MuiTouchRipple-root"
    />
  </button>,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  .c3 {
  width: 1em;
  height: 1em;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
  pointer-events: none;
}

.c2 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  font-size: inherit;
}

.c0 {
  display: inline-block;
  outline: none;
}

.c1 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 40px;
  height: 40px;
  color: #666666;
  border-radius: 50%;
  -webkit-transition: background 150ms cubic-bezier(0.4,0,0.2,1) 0ms;
  transition: background 150ms cubic-bezier(0.4,0,0.2,1) 0ms;
  cursor: pointer;
  font-size: 20px;
}

.c1:active {
  color: #666666;
}

.c1.focus-visible,
.c1[data-focus-visible-added] {
  background-color: rgba(102,102,102,0.16);
}

.c1.focus-visible:active,
.c1[data-focus-visible-added]:active {
  color: rgba(102,102,102,0.88);
}

.c1.RcIconButton-persistBg {
  background-color: rgba(102,102,102,0.12);
}

.c1.RcIconButton-disabled {
  color: #C7C7C7;
}

.c1.RcIconButton-invisible {
  opacity: 0;
  visibility: hidden;
  width: 0;
  height: 0;
}

.c1.RcIconButton-outline {
  border: 1px solid #C7C7C7;
}

.c1.RcIconButton-contained {
  color: #fff;
  background-color: #666666;
}

.c1.RcIconButton-contained.RcIconButton-disabled {
  background-color: #E5E5E5;
  color: #939393;
}

.c1.RcIconButton-contained:before {
  content: '';
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  position: absolute;
}

.c1.RcIconButton-contained.focus-visible,
.c1.RcIconButton-contained[data-focus-visible-added] {
  color: #fff;
}

.c1.RcIconButton-contained.focus-visible:before,
.c1.RcIconButton-contained[data-focus-visible-added]:before {
  background-color: rgba(255,255,255,0.16);
}

.c1.RcIconButton-contained:active {
  color: #fff;
}

.c1 .RcIconButtonTouchRipple-ripplePulsate {
  border-radius: 0;
  -webkit-animation-name: none;
  animation-name: none;
  opacity: 0;
}

@media (hover:hover) and (pointer:fine) {
  .c1:hover {
    background-color: rgba(102,102,102,0.08);
    color: rgba(102,102,102,0.88);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c1.RcIconButton-contained:hover {
    color: #fff;
  }

  .c1.RcIconButton-contained:hover:before {
    background-color: rgba(255,255,255,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<span
    aria-describedby={null}
    className="c0"
    onBlur={[Function]}
    onFocus={[Function]}
    onMouseLeave={[Function]}
    onMouseOver={[Function]}
    onTouchEnd={[Function]}
    onTouchStart={[Function]}
    title="Normal Title"
  >
    <button
      aria-disabled={false}
      className="MuiButtonBase-root c1 RcIconButton-root RcIconButton-round"
      disabled={false}
      onBlur={[Function]}
      onDragLeave={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyUp={[Function]}
      onMouseDown={[Function]}
      onMouseLeave={[Function]}
      onMouseUp={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      tabIndex={0}
      type="button"
    >
      <span
        className="c2 add icon"
      >
        <svg
          className="c3"
          viewBox="0 0 32 32"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M25.899 6.101c5.467 5.467 5.467 14.332 0 19.799s-14.332 5.467-19.799 0C.633 20.433.633 11.568 6.1 6.101s14.332-5.467 19.799 0zm-8.898 8.898L17 9a1 1 0 0 0-1.993-.117L15 9l.001 5.999L9 15a1 1 0 0 0-.117 1.993L9 17l6.001-.001L15 23a1 1 0 0 0 1.993.117L17 23l.001-6.001L23 17a1 1 0 0 0 .117-1.993L23 15l-5.999-.001z"
          />
        </svg>
        
      </span>
      <span
        className="MuiTouchRipple-root"
      />
    </button>
  </span>,
  .c3 {
  width: 1em;
  height: 1em;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
  pointer-events: none;
}

.c2 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  font-size: 20px;
}

.c0 {
  display: inline-block;
  outline: none;
}

.c1.RcCheckbox-root {
  color: #939393;
  padding: 10px;
}

.c1.RcCheckbox-root.RcCheckbox-checked {
  color: #066FAC;
}

.c1.RcCheckbox-root.RcCheckbox-disabled {
  color: #C7C7C7;
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {
  .c1.RcCheckbox-root:hover {
    background-color: rgba(147,147,147,0.12);
  }

  .c1.RcCheckbox-root:hover.RcCheckbox-checked {
    color: rgba(6,111,172,0.92);
    background-color: rgba(6,111,172,0.12);
  }
}

@media (hover:hover) and (pointer:fine) {

}

<span
    aria-describedby={null}
    className="c0"
    onBlur={[Function]}
    onFocus={[Function]}
    onMouseLeave={[Function]}
    onMouseOver={[Function]}
    onTouchEnd={[Function]}
    onTouchStart={[Function]}
    title="Normal Title"
  >
    <span
      aria-disabled={false}
      className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-375 MuiCheckbox-root RcCheckbox-root c1"
      onBlur={[Function]}
      onDragLeave={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyUp={[Function]}
      onMouseDown={[Function]}
      onMouseLeave={[Function]}
      onMouseUp={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      tabIndex={null}
    >
      <span
        className="MuiIconButton-label"
      >
        <input
          className="PrivateSwitchBase-input-378"
          data-indeterminate={false}
          disabled={false}
          onChange={[Function]}
          type="checkbox"
        />
        <span
          className="c2 unselect icon"
        >
          <svg
            className="c3"
            viewBox="0 0 32 32"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M27 2a3 3 0 0 1 3 3v22a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3V5a3 3 0 0 1 3-3h22zm0 2.5H5a.5.5 0 0 0-.492.41L4.5 5v22a.5.5 0 0 0 .41.492L5 27.5h22a.5.5 0 0 0 .492-.41L27.5 27V5a.5.5 0 0 0-.41-.492L27 4.5z"
            />
          </svg>
          
        </span>
      </span>
      <span
        className="MuiTouchRipple-root"
      />
    </span>
  </span>,
  .c0 {
  display: inline-block;
  outline: none;
}

.c1.RcRadio-root {
  color: #939393;
  padding: 10px;
}

.c1.RcRadio-root.RcRadio-checked {
  color: #066FAC;
}

.c1.RcRadio-root.RcRadio-disabled {
  color: #C7C7C7;
}

.c1 .RadioButtonIcon-root svg {
  font-size: 24px;
  margin: -2px;
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {
  .c1.RcRadio-root:hover {
    background-color: rgba(147,147,147,0.12);
  }

  .c1.RcRadio-root:hover.RcRadio-checked {
    color: rgba(6,111,172,0.92);
    background-color: rgba(6,111,172,0.12);
  }
}

<span
    aria-describedby={null}
    className="c0"
    onBlur={[Function]}
    onFocus={[Function]}
    onMouseLeave={[Function]}
    onMouseOver={[Function]}
    onTouchEnd={[Function]}
    onTouchStart={[Function]}
    title="Normal Title"
  >
    <span
      aria-disabled={false}
      className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-375 MuiRadio-root RcRadio-root c1"
      onBlur={[Function]}
      onDragLeave={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyUp={[Function]}
      onMouseDown={[Function]}
      onMouseLeave={[Function]}
      onMouseUp={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      tabIndex={null}
    >
      <span
        className="MuiIconButton-label"
      >
        <input
          className="PrivateSwitchBase-input-378"
          disabled={false}
          onChange={[Function]}
          type="radio"
        />
        <div
          className="PrivateRadioButtonIcon-root-379 RadioButtonIcon-root"
        >
          <svg
            aria-hidden={true}
            className="MuiSvgIcon-root"
            focusable="false"
            viewBox="0 0 24 24"
          >
            <path
              d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
            />
          </svg>
          <svg
            aria-hidden={true}
            className="MuiSvgIcon-root PrivateRadioButtonIcon-layer-380"
            focusable="false"
            viewBox="0 0 24 24"
          >
            <path
              d="M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
            />
          </svg>
        </div>
      </span>
      <span
        className="MuiTouchRipple-root"
      />
    </span>
  </span>,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  .c4 {
  width: 1em;
  height: 1em;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
  pointer-events: none;
}

.c3 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  font-size: 20px;
}

.c5 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  font-size: 24px;
}

.c1 {
  display: inline-block;
  outline: none;
}

.c2 {
  text-transform: none;
  font-size: 0.9375rem;
  font-weight: 700;
  font-family: Lato,Helvetica,Arial,sans-serif;
  text-align: center;
  box-shadow: unset;
  min-width: 96px;
  min-height: 36px;
  padding: 0px 16px;
}

.c2 .RcButton-startIcon {
  margin-right: 8px;
}

.c2 .RcButton-endIcon {
  margin-left: 8px;
}

.c2.RcButton-text {
  color: #066FAC;
}

.c2.RcButton-text.RcButton-disabled {
  color: #C7C7C7;
}

.c2.RcButton-contained {
  color: #fff;
  background-color: #066FAC;
}

.c2.RcButton-contained.RcButton-disabled {
  background-color: #E5E5E5;
  color: #939393;
}

.c2.RcButton-outlined {
  color: #066FAC;
  border-color: #066FAC;
  padding: 0px 15px;
}

.c2.RcButton-outlined.RcButton-disabled {
  color: #C7C7C7;
  border-color: #C7C7C7;
}

.c2.RcButton-outlined:after {
  top: -1px;
  bottom: -1px;
  left: -1px;
  right: -1px;
  border: 1px solid transparent;
}

.c6.c6.c6 {
  color: inherit;
  margin-right: 0;
}

.c0 .RcSplitButton-groupedContainedHorizontal:not(:last-child) {
  border-right: unset;
}

.c0 .RcSplitButton-actionButton {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

.c0 .RcSplitButton-actionButton:after {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

.c0 .RcSplitButton-controlButton {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}

.c0 .RcSplitButton-controlButton:after {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}

.c0 .RcSplitButton-groupedHorizontal {
  min-width: 72px;
}

.c0 .RcSplitButton-groupedHorizontal.RcSplitButton-controlButton {
  padding: 0;
  min-width: 24px;
  padding-right: 1px;
  border-left: 1px solid rgba(255,255,255,0.24);
}

.c0 .RcSplitButton-groupedHorizontal:not(.RcSplitButton-actionButton) {
  margin-left: 0;
}

.c0.RcSplitButton-menuOpen .RcSplitButton-controlButton {
  background: rgba(6,111,172,0.76);
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {
  .c2.RcButton-text:hover {
    background-color: rgba(6,111,172,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c2.RcButton-contained:hover {
    background-color: rgba(6,111,172,0.92);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c2.RcButton-outlined:hover {
    background-color: rgba(6,111,172,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<div
    className="MuiButtonGroup-root RcSplitButton-root c0 MuiButtonGroup-disableElevation MuiButtonGroup-contained"
    role="group"
  >
    <span
      aria-describedby={null}
      className="c1"
      onBlur={[Function]}
      onFocus={[Function]}
      onMouseLeave={[Function]}
      onMouseOver={[Function]}
      onTouchEnd={[Function]}
      onTouchStart={[Function]}
      title="Normal Title"
    >
      <button
        className="MuiButtonBase-root MuiButton-root MuiButton-contained RcButton-contained c2 MuiButtonGroup-grouped MuiButtonGroup-groupedHorizontal RcSplitButton-groupedHorizontal MuiButtonGroup-groupedContained MuiButtonGroup-groupedContainedHorizontal RcSplitButton-groupedContainedHorizontal MuiButtonGroup-groupedContainedPrimary RcSplitButton-actionButton MuiButton-disableElevation"
        disabled={false}
        onBlur={[Function]}
        onClick={[Function]}
        onDragLeave={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onKeyUp={[Function]}
        onMouseDown={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
        tabIndex={0}
        type="button"
      >
        <span
          className="MuiButton-label"
        >
          <span
            className="c3 videocam icon"
          >
            <svg
              className="c4"
              viewBox="0 0 32 32"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M21 6a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h18zm9 3.618a1 1 0 0 1 .993.883l.007.117v10.764a1 1 0 0 1-1.34.94l-.107-.046-5-2.5a1 1 0 0 1-.545-.77L24 18.881v-5.764a1 1 0 0 1 .445-.832l.108-.063 5-2.5c.139-.069.292-.106.447-.106z"
              />
            </svg>
            
          </span>
        </span>
        <span
          className="MuiTouchRipple-root"
        />
      </button>
    </span>
    <span
      aria-describedby={null}
      className="c1"
      onBlur={[Function]}
      onFocus={[Function]}
      onMouseLeave={[Function]}
      onMouseOver={[Function]}
      onTouchEnd={[Function]}
      onTouchStart={[Function]}
      title="Normal Title"
    >
      <button
        aria-haspopup="listbox"
        className="MuiButtonBase-root MuiButton-root MuiButton-contained RcButton-contained c2 MuiButtonGroup-grouped MuiButtonGroup-groupedHorizontal RcSplitButton-groupedHorizontal MuiButtonGroup-groupedContained MuiButtonGroup-groupedContainedHorizontal RcSplitButton-groupedContainedHorizontal MuiButtonGroup-groupedContainedPrimary RcSplitButton-controlButton MuiButton-disableElevation"
        disabled={false}
        onBlur={[Function]}
        onClick={[Function]}
        onDragLeave={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onKeyUp={[Function]}
        onMouseDown={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
        tabIndex={0}
        type="button"
      >
        <span
          className="MuiButton-label"
        >
          <span
            className="c5 c6 arrow-down icon"
            open={false}
          >
            <svg
              className="c4"
              viewBox="0 0 32 32"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="m16.707 20.293 5.586-5.586A.999.999 0 0 0 21.586 13H10.414a1 1 0 0 0-.707 1.707l5.586 5.586a.999.999 0 0 0 1.414 0z"
              />
            </svg>
            
          </span>
        </span>
        <span
          className="MuiTouchRipple-root"
        />
      </button>
    </span>
  </div>,
  .c0 {
  display: inline-block;
  outline: none;
}

.c1 {
  text-transform: none;
  font-size: 0.9375rem;
  font-weight: 700;
  font-family: Lato,Helvetica,Arial,sans-serif;
  text-align: center;
  box-shadow: unset;
  min-width: 96px;
  min-height: 36px;
  padding: 0px 16px;
}

.c1 .RcButton-startIcon {
  margin-right: 8px;
}

.c1 .RcButton-endIcon {
  margin-left: 8px;
}

.c1.RcButton-text {
  color: #066FAC;
}

.c1.RcButton-text.RcButton-disabled {
  color: #C7C7C7;
}

.c1.RcButton-contained {
  color: #fff;
  background-color: #066FAC;
}

.c1.RcButton-contained.RcButton-disabled {
  background-color: #E5E5E5;
  color: #939393;
}

.c1.RcButton-outlined {
  color: #066FAC;
  border-color: #066FAC;
  padding: 0px 15px;
}

.c1.RcButton-outlined.RcButton-disabled {
  color: #C7C7C7;
  border-color: #C7C7C7;
}

.c1.RcButton-outlined:after {
  top: -1px;
  bottom: -1px;
  left: -1px;
  right: -1px;
  border: 1px solid transparent;
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {
  .c1.RcButton-text:hover {
    background-color: rgba(6,111,172,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c1.RcButton-contained:hover {
    background-color: rgba(6,111,172,0.92);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c1.RcButton-outlined:hover {
    background-color: rgba(6,111,172,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<div
    aria-describedby={null}
    className="c0"
    onBlur={[Function]}
    onFocus={[Function]}
    onMouseLeave={[Function]}
    onMouseOver={[Function]}
    onTouchEnd={[Function]}
    onTouchStart={[Function]}
    title="disabled item tooltip"
  >
    <button
      className="MuiButtonBase-root MuiButton-root MuiButton-contained RcButton-contained c1 Mui-disabled RcButton-disabled Mui-disabled"
      disabled={true}
      onBlur={[Function]}
      onDragLeave={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onKeyUp={[Function]}
      onMouseDown={[Function]}
      onMouseLeave={[Function]}
      onMouseUp={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      tabIndex={-1}
      type="button"
    >
      <span
        className="MuiButton-label"
      >
        disabled item also have Tooltip
      </span>
    </button>
  </div>,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  .c0 {
  text-transform: none;
  font-size: 0.9375rem;
  font-weight: 700;
  font-family: Lato,Helvetica,Arial,sans-serif;
  text-align: center;
  box-shadow: unset;
  border-radius: 100vw;
  min-width: 96px;
  min-height: 36px;
  padding: 0px 16px;
}

.c0 .RcButton-startIcon {
  margin-right: 8px;
}

.c0 .RcButton-endIcon {
  margin-left: 8px;
}

.c0.RcButton-text {
  color: #066FAC;
}

.c0.RcButton-text.RcButton-disabled {
  color: #C7C7C7;
}

.c0.RcButton-contained {
  color: #fff;
  background-color: #066FAC;
}

.c0.RcButton-contained.RcButton-disabled {
  background-color: #E5E5E5;
  color: #939393;
}

.c0.RcButton-outlined {
  color: #066FAC;
  border-color: #066FAC;
  padding: 0px 15px;
}

.c0.RcButton-outlined.RcButton-disabled {
  color: #C7C7C7;
  border-color: #C7C7C7;
}

.c0.RcButton-outlined:after {
  top: -1px;
  bottom: -1px;
  left: -1px;
  right: -1px;
  border: 1px solid transparent;
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-text:hover {
    background-color: rgba(6,111,172,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-contained:hover {
    background-color: rgba(6,111,172,0.92);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-outlined:hover {
    background-color: rgba(6,111,172,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<button
    aria-describedby={null}
    className="MuiButtonBase-root MuiButton-root MuiButton-contained RcButton-contained c0 MuiButton-fullWidth"
    disabled={false}
    onBlur={[Function]}
    onDragLeave={[Function]}
    onFocus={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseDown={[Function]}
    onMouseLeave={[Function]}
    onMouseOver={[Function]}
    onMouseUp={[Function]}
    onTouchEnd={[Function]}
    onTouchMove={[Function]}
    onTouchStart={[Function]}
    tabIndex={0}
    title="Normal Title"
    type="button"
  >
    <span
      className="MuiButton-label"
    >
      Always have tooltip when disabled with Round radius
    </span>
    <span
      className="MuiTouchRipple-root"
    />
  </button>,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  .c0 {
  text-transform: none;
  font-size: 0.9375rem;
  font-weight: 700;
  font-family: Lato,Helvetica,Arial,sans-serif;
  text-align: center;
  box-shadow: unset;
  border-radius: 50%;
  min-width: 96px;
  min-height: 36px;
  padding: 0px 16px;
}

.c0 .RcButton-startIcon {
  margin-right: 8px;
}

.c0 .RcButton-endIcon {
  margin-left: 8px;
}

.c0.RcButton-text {
  color: #066FAC;
}

.c0.RcButton-text.RcButton-disabled {
  color: #C7C7C7;
}

.c0.RcButton-contained {
  color: #fff;
  background-color: #066FAC;
}

.c0.RcButton-contained.RcButton-disabled {
  background-color: #E5E5E5;
  color: #939393;
}

.c0.RcButton-outlined {
  color: #066FAC;
  border-color: #066FAC;
  padding: 0px 15px;
}

.c0.RcButton-outlined.RcButton-disabled {
  color: #C7C7C7;
  border-color: #C7C7C7;
}

.c0.RcButton-outlined:after {
  top: -1px;
  bottom: -1px;
  left: -1px;
  right: -1px;
  border: 1px solid transparent;
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-text:hover {
    background-color: rgba(6,111,172,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-contained:hover {
    background-color: rgba(6,111,172,0.92);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-outlined:hover {
    background-color: rgba(6,111,172,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

<button
    aria-describedby={null}
    className="MuiButtonBase-root MuiButton-root MuiButton-contained RcButton-contained c0 MuiButton-fullWidth"
    disabled={false}
    onBlur={[Function]}
    onDragLeave={[Function]}
    onFocus={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseDown={[Function]}
    onMouseLeave={[Function]}
    onMouseOver={[Function]}
    onMouseUp={[Function]}
    onTouchEnd={[Function]}
    onTouchMove={[Function]}
    onTouchStart={[Function]}
    tabIndex={0}
    title="Normal Title"
    type="button"
  >
    <span
      className="MuiButton-label"
    >
      Always have tooltip when disabled with circle radius
    </span>
    <span
      className="MuiTouchRipple-root"
    />
  </button>,
]
`;

exports[`Storyshots ðŸš€ Cleanup Components/Tooltip Tooltip With Force Hide 1`] = `
Array [
  .c0 {
  text-transform: none;
  font-size: 0.9375rem;
  font-weight: 700;
  font-family: Lato,Helvetica,Arial,sans-serif;
  text-align: center;
  box-shadow: unset;
  min-width: 96px;
  min-height: 36px;
  padding: 0px 16px;
}

.c0 .RcButton-startIcon {
  margin-right: 8px;
}

.c0 .RcButton-endIcon {
  margin-left: 8px;
}

.c0.RcButton-text {
  color: #066FAC;
}

.c0.RcButton-text.RcButton-disabled {
  color: #C7C7C7;
}

.c0.RcButton-contained {
  color: #fff;
  background-color: #066FAC;
}

.c0.RcButton-contained.RcButton-disabled {
  background-color: #E5E5E5;
  color: #939393;
}

.c0.RcButton-outlined {
  color: #066FAC;
  border-color: #066FAC;
  padding: 0px 15px;
}

.c0.RcButton-outlined.RcButton-disabled {
  color: #C7C7C7;
  border-color: #C7C7C7;
}

.c0.RcButton-outlined:after {
  top: -1px;
  bottom: -1px;
  left: -1px;
  right: -1px;
  border: 1px solid transparent;
}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-text:hover {
    background-color: rgba(6,111,172,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-contained:hover {
    background-color: rgba(6,111,172,0.92);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-outlined:hover {
    background-color: rgba(6,111,172,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (max-width:463.95px) {

}

@media (hover:hover) and (pointer:fine) {

}

<button
    aria-describedby={null}
    className="MuiButtonBase-root MuiButton-root MuiButton-contained RcButton-contained c0"
    disabled={false}
    onBlur={[Function]}
    onClick={[Function]}
    onDragLeave={[Function]}
    onFocus={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseDown={[Function]}
    onMouseLeave={[Function]}
    onMouseOver={[Function]}
    onMouseUp={[Function]}
    onTouchEnd={[Function]}
    onTouchMove={[Function]}
    onTouchStart={[Function]}
    tabIndex={0}
    title="Add"
    type="button"
  >
    <span
      className="MuiButton-label"
    >
      Switch force
    </span>
    <span
      className="MuiTouchRipple-root"
    />
  </button>,
  .c0 {
  text-transform: none;
  font-size: 0.9375rem;
  font-weight: 700;
  font-family: Lato,Helvetica,Arial,sans-serif;
  text-align: center;
  box-shadow: unset;
  min-width: 96px;
  min-height: 36px;
  padding: 0px 16px;
}

.c0 .RcButton-startIcon {
  margin-right: 8px;
}

.c0 .RcButton-endIcon {
  margin-left: 8px;
}

.c0.RcButton-text {
  color: #FF8800;
}

.c0.RcButton-text.RcButton-disabled {
  color: #C7C7C7;
}

.c0.RcButton-contained {
  color: rgba(0,0,0,0.87);
  background-color: #FF8800;
}

.c0.RcButton-contained.RcButton-disabled {
  background-color: #E5E5E5;
  color: #939393;
}

.c0.RcButton-outlined {
  color: #FF8800;
  border-color: #FF8800;
  padding: 0px 15px;
}

.c0.RcButton-outlined.RcButton-disabled {
  color: #C7C7C7;
  border-color: #C7C7C7;
}

.c0.RcButton-outlined:after {
  top: -1px;
  bottom: -1px;
  left: -1px;
  right: -1px;
  border: 1px solid transparent;
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-text:hover {
    background-color: rgba(255,136,0,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-contained:hover {
    background-color: rgba(255,136,0,0.92);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-outlined:hover {
    background-color: rgba(255,136,0,0.08);
  }
}

@media (max-width:463.95px) {

}

@media (hover:hover) and (pointer:fine) {

}

<button
    aria-describedby={null}
    className="MuiButtonBase-root MuiButton-root MuiButton-contained RcButton-contained c0"
    disabled={false}
    onBlur={[Function]}
    onClick={[Function]}
    onDragLeave={[Function]}
    onFocus={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseDown={[Function]}
    onMouseLeave={[Function]}
    onMouseOver={[Function]}
    onMouseUp={[Function]}
    onTouchEnd={[Function]}
    onTouchMove={[Function]}
    onTouchStart={[Function]}
    style={
      Object {
        "marginLeft": "1em",
      }
    }
    tabIndex={0}
    title="Add"
    type="button"
  >
    <span
      className="MuiButton-label"
    >
      Open
    </span>
    <span
      className="MuiTouchRipple-root"
    />
  </button>,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (max-width:463.95px) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  @media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (max-width:463.95px) {

}

@media (hover:hover) and (pointer:fine) {

}

<br />,
  .c0 {
  color: #121212;
  font-size: 0.9375rem;
  font-weight: 700;
  font-family: Lato,Helvetica,Arial,sans-serif;
  line-height: 22px;
}

.c0 .RcFormControlLabel-disabled {
  color: #C7C7C7;
}

.c0 .RcCheckbox-root,
.c0 .RcRadio-root {
  margin-left: 0;
  margin-right: 4px;
}

.c0 .RcSwitch-root {
  margin: 12px;
}

.c0.RcFormControlLabel-labelPlacementStart .RcCheckbox-root,
.c0.RcFormControlLabel-labelPlacementStart .RcRadio-root {
  margin-left: 4px;
  margin-right: 0;
}

.c1.RcSwitch-root {
  padding: 0px;
  width: 36px;
  height: 20px;
}

.c1.RcSwitch-root[data-focus-visible-within] {
  border-radius: 100vw;
  outline-color: #066FAC;
  outline-width: 2px;
  outline-style: solid;
  outline-offset: 2px;
}

.c1.RcSwitch-root .RcSwitch-switchBase {
  width: 36px;
  height: 20px;
  padding: 0;
  background-color: transparent;
  -webkit-transform: translateX(-8px);
  -ms-transform: translateX(-8px);
  transform: translateX(-8px);
}

.c1.RcSwitch-root .RcSwitch-switchBase.RcSwitch-checked {
  -webkit-transform: translateX(8px);
  -ms-transform: translateX(8px);
  transform: translateX(8px);
}

.c1.RcSwitch-root .RcSwitch-thumb {
  height: 12px;
  width: 12px;
  background-color: #FFFFFF;
  box-shadow: none;
}

.c1.RcSwitch-root .RcSwitch-track {
  height: 20px;
  opacity: 1;
  margin: 0;
  border-radius: 100vw;
  background-color: #939393;
}

.c1.RcSwitch-root .RcSwitch-checked + .RcSwitch-track {
  background-color: #066FAC;
}

.c1.RcSwitch-root .RcSwitch-disabled + .RcSwitch-track {
  background-color: #C7C7C7;
}

.c1.RcSwitch-root:active .RcSwitch-switchBase:not(.RcSwitch-disabled) + .RcSwitch-track {
  background-color: rgba(147,147,147,0.76);
}

.c1.RcSwitch-root:active .RcSwitch-switchBase:not(.RcSwitch-disabled).RcSwitch-checked + .RcSwitch-track {
  background-color: rgba(6,111,172,0.76);
}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (hover:hover) and (pointer:fine) {

}

@media (max-width:463.95px) {

}

@media (hover:hover) and (pointer:fine) {
  .c1.RcSwitch-root:hover .RcSwitch-switchBase:not(.RcSwitch-disabled) + .RcSwitch-track {
    background-color: rgba(147,147,147,0.92);
  }

  .c1.RcSwitch-root:hover .RcSwitch-switchBase:not(.RcSwitch-disabled).RcSwitch-checked + .RcSwitch-track {
    background-color: rgba(6,111,172,0.92);
  }
}

<label
    className="MuiFormControlLabel-root RcFormControlLabel-root c0"
  >
    <span
      className="MuiSwitch-root RcSwitch-root c1"
    >
      <span
        aria-disabled={false}
        className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-382 MuiSwitch-switchBase RcSwitch-switchBase"
        onBlur={[Function]}
        onClick={[Function]}
        onDragLeave={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onKeyUp={[Function]}
        onMouseDown={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
        tabIndex={null}
      >
        <span
          className="MuiIconButton-label"
        >
          <input
            checked={false}
            className="PrivateSwitchBase-input-385 MuiSwitch-input"
            onChange={[Function]}
            type="checkbox"
          />
          <span
            className="MuiSwitch-thumb RcSwitch-thumb"
          />
        </span>
      </span>
      <span
        className="MuiSwitch-track RcSwitch-track"
      />
    </span>
    <span
      className="MuiTypography-root MuiFormControlLabel-label MuiTypography-body1"
    >
      Click to Switch forceHide: false
    </span>
  </label>,
]
`;

exports[`Storyshots ðŸš€ Cleanup Components/Tooltip Tooltip With Interactive Link 1`] = `
.c0 {
  text-transform: none;
  font-size: 0.9375rem;
  font-weight: 700;
  font-family: Lato,Helvetica,Arial,sans-serif;
  text-align: center;
  box-shadow: unset;
  min-width: 96px;
  min-height: 36px;
  padding: 0px 16px;
}

.c0 .RcButton-startIcon {
  margin-right: 8px;
}

.c0 .RcButton-endIcon {
  margin-left: 8px;
}

.c0.RcButton-text {
  color: #066FAC;
}

.c0.RcButton-text.RcButton-disabled {
  color: #C7C7C7;
}

.c0.RcButton-contained {
  color: #fff;
  background-color: #066FAC;
}

.c0.RcButton-contained.RcButton-disabled {
  background-color: #E5E5E5;
  color: #939393;
}

.c0.RcButton-outlined {
  color: #066FAC;
  border-color: #066FAC;
  padding: 0px 15px;
}

.c0.RcButton-outlined.RcButton-disabled {
  color: #C7C7C7;
  border-color: #C7C7C7;
}

.c0.RcButton-outlined:after {
  top: -1px;
  bottom: -1px;
  left: -1px;
  right: -1px;
  border: 1px solid transparent;
}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-text:hover {
    background-color: rgba(6,111,172,0.08);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-contained:hover {
    background-color: rgba(6,111,172,0.92);
  }
}

@media (hover:hover) and (pointer:fine) {
  .c0.RcButton-outlined:hover {
    background-color: rgba(6,111,172,0.08);
  }
}

<button
  aria-describedby={null}
  className="MuiButtonBase-root MuiButton-root MuiButton-contained RcButton-contained c0"
  disabled={false}
  onBlur={[Function]}
  onDragLeave={[Function]}
  onFocus={[Function]}
  onKeyDown={[Function]}
  onKeyUp={[Function]}
  onMouseDown={[Function]}
  onMouseLeave={[Function]}
  onMouseOver={[Function]}
  onMouseUp={[Function]}
  onTouchEnd={[Function]}
  onTouchMove={[Function]}
  onTouchStart={[Function]}
  tabIndex={0}
  title={null}
  type="button"
>
  <span
    className="MuiButton-label"
  >
    Open
  </span>
  <span
    className="MuiTouchRipple-root"
  />
</button>
`;
